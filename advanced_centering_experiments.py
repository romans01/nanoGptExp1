#!/usr/bin/env python3
"""
–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
import subprocess
import time
from datetime import datetime

def create_experiment_configs():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ —É—Å–ø–µ—à–Ω–æ–π train_shakespeare_bpe.py)
    base_config = """
# –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
out_dir = 'out-advanced-centering-{experiment_name}'
eval_interval = 50
log_interval = 10
eval_iters = 20
eval_only = False
always_save_checkpoint = True

# –î–∞–Ω–Ω—ã–µ
dataset = 'shakespeare'
gradient_accumulation_steps = 4
batch_size = 8
block_size = 256

# –ú–æ–¥–µ–ª—å - —É–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
n_layer = 8
n_head = 8
n_embd = 384
dropout = 0.1

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
learning_rate = 3e-4
max_iters = {max_iters}
lr_decay_iters = {max_iters}
min_lr = 3e-5
beta2 = 0.99
warmup_iters = 100
weight_decay = 1e-1

# –°–∏—Å—Ç–µ–º–∞
device = 'cuda'
dtype = 'bfloat16'
compile = True

# –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
{centering_params}
"""
    
    experiments = [
        {
            'name': 'baseline_advanced',
            'description': '–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –±–µ–∑ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–æ–Ω—Ç—Ä–æ–ª—å)',
            'centering_params': '# –ë–µ–∑ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è'
        },
        {
            'name': 'qk_only_advanced',
            'description': '–¢–æ–ª—å–∫–æ QK —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ)',
            'centering_params': '''center_qk = True
centering_mode = 'adaptive' '''
        },
        {
            'name': 'value_centered',
            'description': '–ù–û–í–û–ï: –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ Value –≤–µ–∫—Ç–æ—Ä–æ–≤',
            'centering_params': '''center_v = True
centering_mode = 'adaptive' '''
        },
        {
            'name': 'mlp_centered',
            'description': '–ù–û–í–û–ï: –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ MLP –ø–æ—Å–ª–µ GELU',
            'centering_params': '''center_mlp = True
centering_mode = 'adaptive' '''
        },
        {
            'name': 'embeddings_centered',
            'description': '–ù–û–í–û–ï: –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤',
            'centering_params': '''center_embeddings = True
centering_mode = 'adaptive' '''
        },
        {
            'name': 'residual_centered',
            'description': '–ù–û–í–û–ï: –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ residual connections',
            'centering_params': '''center_residual = True
centering_mode = 'adaptive' '''
        },
        {
            'name': 'qk_plus_value',
            'description': 'QK + Value —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ',
            'centering_params': '''center_qk = True
center_v = True
centering_mode = 'adaptive' '''
        },
        {
            'name': 'qk_plus_mlp',
            'description': 'QK + MLP —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ',
            'centering_params': '''center_qk = True
center_mlp = True
centering_mode = 'adaptive' '''
        },
        {
            'name': 'full_attention_centered',
            'description': '–ü–æ–ª–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ attention (Q+K+V)',
            'centering_params': '''center_qk = True
center_v = True
centering_mode = 'adaptive' '''
        },
        {
            'name': 'conservative_centering',
            'description': '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ (QK + —ç–º–±–µ–¥–¥–∏–Ω–≥–∏)',
            'centering_params': '''center_qk = True
center_embeddings = True
centering_mode = 'adaptive' '''
        },
        {
            'name': 'aggressive_centering',
            'description': '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤—Å–µ –∫—Ä–æ–º–µ residual)',
            'centering_params': '''center_qk = True
center_v = True
center_mlp = True
center_embeddings = True
center_final_output = True
centering_mode = 'adaptive' '''
        }
    ]
    
    return base_config, experiments

def run_experiments(max_iters=500):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–∏—é —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    print(f"üß™ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–´ –° –†–ê–°–®–ò–†–ï–ù–ù–´–ú –¶–ï–ù–¢–†–ò–†–û–í–ê–ù–ò–ï–ú")
    print("=" * 60)
    print(f"üéØ –¶–µ–ª—å: –ù–∞–π—Ç–∏ –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")
    print(f"üìä –ò—Ç–µ—Ä–∞—Ü–∏–π: {max_iters} –∫–∞–∂–¥—ã–π")
    print(f"‚è±Ô∏è  –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~{len(create_experiment_configs()[1]) * 3} –º–∏–Ω—É—Ç")
    print("=" * 60)
    
    base_config, experiments = create_experiment_configs()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–æ–≤
    os.makedirs('config', exist_ok=True)
    
    results = []
    start_time = time.time()
    
    for i, experiment in enumerate(experiments, 1):
        print(f"\n–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç {i}/{len(experiments)}")
        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é: {experiment['name']}")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {experiment['description']}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª
        config_content = base_config.format(
            experiment_name=experiment['name'],
            max_iters=max_iters,
            centering_params=experiment['centering_params']
        )
        
        config_path = f"config/{experiment['name']}.py"
        with open(config_path, 'w') as f:
            f.write(config_content)
        
        print(f"üìÑ –ö–æ–Ω—Ñ–∏–≥: {config_path}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
        exp_start_time = time.time()
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º train_centered.py –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            train_script = 'train_centered.py' if 'center_' in experiment['centering_params'] else 'train.py'
            
            cmd = ['python', 'train_with_logging.py', config_path, f'--max_iters={max_iters}']
            print(f"üîÑ –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            exp_time = time.time() - exp_start_time
            
            if result.returncode == 0:
                print(f"‚úÖ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç {experiment['name']} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {exp_time:.1f}—Å ({exp_time/60:.1f} –º–∏–Ω)")
                results.append({
                    'name': experiment['name'],
                    'description': experiment['description'],
                    'success': True,
                    'time': exp_time
                })
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ {experiment['name']}")
                print(f"Stderr: {result.stderr[:200]}...")
                results.append({
                    'name': experiment['name'],
                    'description': experiment['description'],
                    'success': False,
                    'error': result.stderr[:200]
                })
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ {experiment['name']}: {e}")
            results.append({
                'name': experiment['name'],
                'description': experiment['description'],
                'success': False,
                'error': str(e)
            })
    
    total_time = time.time() - start_time
    
    # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüéâ –ó–ê–í–ï–†–®–ï–ù–û –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–û–í: {len(results)}")
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}—Å ({total_time/60:.1f} –º–∏–Ω)")
    print("=" * 60)
    
    successful = [r for r in results if r['success']]
    failed = [r for r in results if not r['success']]
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {len(successful)}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {len(failed)}")
    
    if successful:
        print(f"\nüèÜ –£—Å–ø–µ—à–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã:")
        for result in successful:
            print(f"  ‚Ä¢ {result['name']}: {result['time']:.1f}—Å - {result['description']}")
    
    if failed:
        print(f"\nüí• –ù–µ—É–¥–∞—á–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã:")
        for result in failed:
            print(f"  ‚Ä¢ {result['name']}: {result['error'][:100]}...")
    
    print(f"\nüìä –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
    print(f"python advanced_centering_experiments.py analyze")
    
    return results

def analyze_results():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    print(f"üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –¶–ï–ù–¢–†–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    base_config, experiments = create_experiment_configs()
    
    results = []
    
    for experiment in experiments:
        checkpoint_path = f"out-advanced-centering-{experiment['name']}/ckpt.pt"
        
        if os.path.exists(checkpoint_path):
            try:
                import torch
                checkpoint = torch.load(checkpoint_path, map_location='cpu')
                
                best_val_loss = checkpoint.get('best_val_loss', None)
                iter_num = checkpoint.get('iter_num', None)
                
                if best_val_loss is not None:
                    results.append({
                        'name': experiment['name'],
                        'description': experiment['description'],
                        'loss': best_val_loss,
                        'iters': iter_num
                    })
                    print(f"‚úÖ {experiment['name']}: {best_val_loss:.4f}")
                else:
                    print(f"‚ö†Ô∏è  {experiment['name']}: checkpoint –±–µ–∑ loss")
                    
            except Exception as e:
                print(f"‚ùå {experiment['name']}: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - {e}")
        else:
            print(f"‚ùå {experiment['name']}: checkpoint –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if not results:
        print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ loss
    results.sort(key=lambda x: x['loss'])
    
    print(f"\nüèÜ –†–ï–ô–¢–ò–ù–ì –ü–û VALIDATION LOSS:")
    print("-" * 60)
    
    baseline_loss = None
    for i, result in enumerate(results, 1):
        if 'baseline' in result['name']:
            baseline_loss = result['loss']
        
        print(f"{i:2d}. {result['name']:20s}: {result['loss']:.4f} - {result['description']}")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å baseline
    if baseline_loss:
        print(f"\nüìà –£–õ–£–ß–®–ï–ù–ò–Ø –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–û BASELINE ({baseline_loss:.4f}):")
        print("-" * 60)
        
        improvements = []
        for result in results:
            if 'baseline' not in result['name']:
                improvement = ((baseline_loss - result['loss']) / baseline_loss) * 100
                improvements.append((result['name'], improvement, result['description']))
                
                status = "üü¢" if improvement > 0 else "üî¥"
                print(f"{status} {result['name']:20s}: {improvement:+6.2f}% - {result['description']}")
        
        # –¢–æ–ø —É–ª—É—á—à–µ–Ω–∏—è
        improvements.sort(key=lambda x: x[1], reverse=True)
        
        print(f"\nü•á –¢–û–ü-3 –£–õ–£–ß–®–ï–ù–ò–Ø:")
        for i, (name, improvement, desc) in enumerate(improvements[:3], 1):
            print(f"{i}. {name}: {improvement:+.2f}% - {desc}")
    
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("-" * 30)
    
    if len(results) >= 2:
        best = results[0]
        print(f"üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best['name']} ({best['loss']:.4f})")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {best['description']}")
        
        if baseline_loss and best['loss'] < baseline_loss:
            improvement = ((baseline_loss - best['loss']) / baseline_loss) * 100
            print(f"üìà –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.2f}%")
        
        print(f"\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ª—É—á—à–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –±–æ–ª—å—à–µ –∏—Ç–µ—Ä–∞—Ü–∏–π")
        print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞")
        print("3. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –ª—É—á—à–∏–µ –ø–æ–¥—Ö–æ–¥—ã")

def main():
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == 'analyze':
        analyze_results()
    elif len(sys.argv) > 1 and sys.argv[1].isdigit():
        max_iters = int(sys.argv[1])
        run_experiments(max_iters)
    else:
        print("üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python advanced_centering_experiments.py [–∏—Ç–µ—Ä–∞—Ü–∏–∏]  # –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤")
        print("  python advanced_centering_experiments.py analyze     # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        print()
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º —Å 500 –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
        run_experiments(500)

if __name__ == "__main__":
    main()
