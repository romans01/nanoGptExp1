#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –±–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
"""

import os
import json
import time
import subprocess
from datetime import datetime
from dataclasses import dataclass, asdict
from typing import Dict, List, Optional, Any

@dataclass
class BaseModelConfig:
    """–ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ - –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è –¥–ª—è –≤—Å–µ—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
    # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏
    n_layer: int = 12
    n_head: int = 12  
    n_embd: int = 768
    dropout: float = 0.1
    
    # –î–∞–Ω–Ω—ã–µ
    dataset: str = 'shakespeare'
    gradient_accumulation_steps: int = 4
    batch_size: int = 8
    block_size: int = 256
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    learning_rate: float = 3e-4
    beta2: float = 0.99
    weight_decay: float = 1e-1
    
    # –°–∏—Å—Ç–µ–º–∞
    device: str = 'cuda'
    dtype: str = 'bfloat16'
    compile: bool = True

@dataclass 
class ExperimentConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞"""
    name: str
    description: str
    max_iters: int
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
    center_qk: bool = False
    center_v: bool = False
    center_mlp: bool = False
    center_embeddings: bool = False
    center_residual: bool = False
    center_final_output: bool = False
    center_block_output: bool = False
    centering_mode: str = 'adaptive'
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    eval_interval: Optional[int] = None
    log_interval: Optional[int] = None
    eval_iters: Optional[int] = None
    warmup_iters: Optional[int] = None
    lr_decay_iters: Optional[int] = None
    min_lr: Optional[float] = None

class UniversalExperimentSystem:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, base_config: BaseModelConfig):
        self.base_config = base_config
        self.experiments: List[ExperimentConfig] = []
        self.results: Dict[str, Any] = {}
        
    def add_experiment(self, experiment: ExperimentConfig):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –≤ —Å–∏—Å—Ç–µ–º—É"""
        self.experiments.append(experiment)
        
    def add_experiments_batch(self, experiments: List[ExperimentConfig]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
        self.experiments.extend(experiments)
        
    def generate_config_file(self, experiment: ExperimentConfig) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞"""
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π
        config_dict = asdict(self.base_config)
        exp_dict = asdict(experiment)
        
        # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è –∏–∑ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
        exp_dict.pop('name')
        exp_dict.pop('description')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        config_dict.update({k: v for k, v in exp_dict.items() if v is not None})
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        config_dict['out_dir'] = f'out-universal-{experiment.name}'
        config_dict['always_save_checkpoint'] = True
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ max_iters
        if experiment.eval_interval is None:
            config_dict['eval_interval'] = max(50, experiment.max_iters // 20)
        if experiment.log_interval is None:
            config_dict['log_interval'] = max(10, experiment.max_iters // 100)
        if experiment.eval_iters is None:
            config_dict['eval_iters'] = max(20, experiment.max_iters // 50)
        if experiment.warmup_iters is None:
            config_dict['warmup_iters'] = max(100, experiment.max_iters // 10)
        if experiment.lr_decay_iters is None:
            config_dict['lr_decay_iters'] = experiment.max_iters
        if experiment.min_lr is None:
            config_dict['min_lr'] = config_dict['learning_rate'] / 10
            
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_path = f'config/universal_{experiment.name}.py'
        os.makedirs('config', exist_ok=True)
        
        with open(config_path, 'w') as f:
            f.write(f"# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {experiment.description}\n")
            f.write(f"# –°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            
            for key, value in config_dict.items():
                if isinstance(value, str):
                    f.write(f"{key} = '{value}'\n")
                else:
                    f.write(f"{key} = {value}\n")
                    
        return config_path
        
    def run_experiment(self, experiment: ExperimentConfig) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç"""
        
        print(f"\nüß™ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢: {experiment.name}")
        print("=" * 60)
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {experiment.description}")
        print(f"üìä –ò—Ç–µ—Ä–∞—Ü–∏–π: {experiment.max_iters}")
        print(f"üß† –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {self.base_config.n_layer} —Å–ª–æ–µ–≤, {self.base_config.n_head} –≥–æ–ª–æ–≤, {self.base_config.n_embd} —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_path = self.generate_config_file(experiment)
        print(f"üìÑ –ö–æ–Ω—Ñ–∏–≥: {config_path}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –æ–±—É—á–µ–Ω–∏—è
        has_advanced_centering = any([
            experiment.center_v, experiment.center_mlp, 
            experiment.center_residual, experiment.center_embeddings
        ])
        
        if has_advanced_centering:
            train_script = 'train_advanced_centered.py'
        elif any([experiment.center_qk, experiment.center_final_output, experiment.center_block_output]):
            train_script = 'train_centered.py'
        else:
            train_script = 'train.py'
            
        print(f"üîß –°–∫—Ä–∏–ø—Ç: {train_script}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
        start_time = time.time()
        
        try:
            cmd = [
                'python', 'train_with_logging.py', 
                config_path, 
                f'--max_iters={experiment.max_iters}'
            ]
            
            print(f"üîÑ –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=3600)
            
            training_time = time.time() - start_time
            
            if result.returncode == 0:
                print(f"‚úÖ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {training_time:.1f}—Å ({training_time/60:.1f} –º–∏–Ω)")
                
                # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                experiment_result = self.parse_experiment_results(experiment, training_time)
                return experiment_result
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {result.stderr[:200]}")
                return {
                    'name': experiment.name,
                    'success': False,
                    'error': result.stderr[:200],
                    'time': training_time
                }
                
        except subprocess.TimeoutExpired:
            print("‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ (60 –º–∏–Ω)")
            return {
                'name': experiment.name,
                'success': False,
                'error': 'Timeout',
                'time': 3600
            }
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return {
                'name': experiment.name,
                'success': False,
                'error': str(e),
                'time': time.time() - start_time
            }
            
    def parse_experiment_results(self, experiment: ExperimentConfig, training_time: float) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞"""
        
        out_dir = f'out-universal-{experiment.name}'
        
        result = {
            'name': experiment.name,
            'description': experiment.description,
            'success': True,
            'time': training_time,
            'config': asdict(experiment),
            'base_config': asdict(self.base_config)
        }
        
        # –ò—â–µ–º –ª–æ–≥ —Ñ–∞–π–ª
        log_files = [f for f in os.listdir('.') if f.startswith(f'training_log_universal_{experiment.name}')]
        if log_files:
            log_file = sorted(log_files)[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
            try:
                with open(log_file, 'r') as f:
                    lines = f.readlines()
                    
                # –ü–∞—Ä—Å–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
                for line in reversed(lines):
                    if 'val_loss' in line and 'train_loss' in line:
                        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫
                        parts = line.strip().split()
                        for i, part in enumerate(parts):
                            if part == 'val_loss' and i + 1 < len(parts):
                                try:
                                    result['final_val_loss'] = float(parts[i + 1])
                                except:
                                    pass
                            elif part == 'train_loss' and i + 1 < len(parts):
                                try:
                                    result['final_train_loss'] = float(parts[i + 1])
                                except:
                                    pass
                        break
                        
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å –ª–æ–≥: {e}")
                
        return result
        
    def run_all_experiments(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã"""
        
        print("üß™ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–û–í")
        print("=" * 80)
        print(f"üéØ –ë–∞–∑–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {self.base_config.n_layer} —Å–ª–æ–µ–≤, {self.base_config.n_head} –≥–æ–ª–æ–≤, {self.base_config.n_embd} —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
        print(f"üìä –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: {len(self.experiments)}")
        
        total_iters = sum(exp.max_iters for exp in self.experiments)
        estimated_time = total_iters * 0.12  # ~0.12 —Å–µ–∫ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é
        print(f"‚è±Ô∏è  –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~{estimated_time/60:.0f} –º–∏–Ω—É—Ç")
        print("=" * 80)
        
        all_results = []
        start_time = time.time()
        
        for i, experiment in enumerate(self.experiments, 1):
            print(f"\n–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç {i}/{len(self.experiments)}")
            result = self.run_experiment(experiment)
            all_results.append(result)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º–∏
            time.sleep(1)
            
        total_time = time.time() - start_time
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_summary = {
            'timestamp': datetime.now().isoformat(),
            'base_config': asdict(self.base_config),
            'total_experiments': len(self.experiments),
            'total_time': total_time,
            'results': all_results
        }
        
        results_file = f'universal_experiments_results_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
        with open(results_file, 'w') as f:
            json.dump(results_summary, f, indent=2)
            
        print(f"\nüéâ –í–°–ï –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}—Å ({total_time/60:.1f} –º–∏–Ω)")
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.analyze_results(all_results)
        
        return results_summary
        
    def analyze_results(self, results: List[Dict[str, Any]]):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
        
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("=" * 50)
        
        successful = [r for r in results if r['success']]
        failed = [r for r in results if not r['success']]
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {len(successful)}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {len(failed)}")
        
        if successful:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ validation loss
            successful_with_loss = [r for r in successful if 'final_val_loss' in r]
            if successful_with_loss:
                successful_with_loss.sort(key=lambda x: x['final_val_loss'])
                
                print(f"\nüèÜ –¢–û–ü-5 –ü–û VALIDATION LOSS:")
                for i, result in enumerate(successful_with_loss[:5], 1):
                    val_loss = result['final_val_loss']
                    name = result['name']
                    description = result['description']
                    print(f"  {i}. {name}: {val_loss:.4f} - {description}")
                    
        if failed:
            print(f"\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–´:")
            for result in failed:
                print(f"  ‚Ä¢ {result['name']}: {result['error']}")

def create_comprehensive_experiments() -> List[ExperimentConfig]:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –Ω–∞–±–æ—Ä —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
    
    experiments = []
    
    # 1. –ë–∞–∑–æ–≤—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã
    experiments.extend([
        ExperimentConfig(
            name="baseline",
            description="–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –±–µ–∑ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è",
            max_iters=100
        ),
        ExperimentConfig(
            name="qk_centered",
            description="–¢–æ–ª—å–∫–æ QK —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ",
            max_iters=100,
            center_qk=True
        ),
        ExperimentConfig(
            name="value_centered", 
            description="–¢–æ–ª—å–∫–æ Value —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ",
            max_iters=100,
            center_v=True
        ),
        ExperimentConfig(
            name="embeddings_centered",
            description="–¢–æ–ª—å–∫–æ Embeddings —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", 
            max_iters=100,
            center_embeddings=True
        )
    ])
    
    # 2. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã
    experiments.extend([
        ExperimentConfig(
            name="qk_plus_value",
            description="QK + Value —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ",
            max_iters=100,
            center_qk=True,
            center_v=True
        ),
        ExperimentConfig(
            name="qk_plus_embeddings",
            description="QK + Embeddings —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ",
            max_iters=100,
            center_qk=True,
            center_embeddings=True
        ),
        ExperimentConfig(
            name="value_plus_embeddings",
            description="Value + Embeddings —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ",
            max_iters=100,
            center_v=True,
            center_embeddings=True
        )
    ])
    
    # 3. –ü–æ–ª–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ attention
    experiments.extend([
        ExperimentConfig(
            name="full_attention",
            description="–ü–æ–ª–Ω–æ–µ attention —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ (Q+K+V)",
            max_iters=100,
            center_qk=True,
            center_v=True
        ),
        ExperimentConfig(
            name="attention_plus_embeddings",
            description="–ü–æ–ª–Ω–æ–µ attention + Embeddings",
            max_iters=100,
            center_qk=True,
            center_v=True,
            center_embeddings=True
        )
    ])
    
    # 4. MLP —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã
    experiments.extend([
        ExperimentConfig(
            name="mlp_centered",
            description="–¢–æ–ª—å–∫–æ MLP —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ",
            max_iters=100,
            center_mlp=True
        ),
        ExperimentConfig(
            name="qk_plus_mlp",
            description="QK + MLP —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ",
            max_iters=100,
            center_qk=True,
            center_mlp=True
        ),
        ExperimentConfig(
            name="full_attention_plus_mlp",
            description="–ü–æ–ª–Ω–æ–µ attention + MLP",
            max_iters=100,
            center_qk=True,
            center_v=True,
            center_mlp=True
        )
    ])
    
    # 5. Residual —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã
    experiments.extend([
        ExperimentConfig(
            name="residual_centered",
            description="–¢–æ–ª—å–∫–æ Residual —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ",
            max_iters=100,
            center_residual=True
        ),
        ExperimentConfig(
            name="embeddings_plus_residual",
            description="Embeddings + Residual —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ",
            max_iters=100,
            center_embeddings=True,
            center_residual=True
        )
    ])
    
    # 6. –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    experiments.extend([
        ExperimentConfig(
            name="conservative_all",
            description="–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ: QK + Embeddings + MLP",
            max_iters=100,
            center_qk=True,
            center_embeddings=True,
            center_mlp=True
        ),
        ExperimentConfig(
            name="aggressive_all",
            description="–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ: –≤—Å–µ –∫—Ä–æ–º–µ Residual",
            max_iters=100,
            center_qk=True,
            center_v=True,
            center_embeddings=True,
            center_mlp=True
        ),
        ExperimentConfig(
            name="maximum_centering",
            description="–ú–ê–ö–°–ò–ú–£–ú: –≤—Å–µ –≤–∏–¥—ã —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è",
            max_iters=100,
            center_qk=True,
            center_v=True,
            center_embeddings=True,
            center_mlp=True,
            center_residual=True
        )
    ])
    
    return experiments

def create_mode_experiments() -> List[ExperimentConfig]:
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    experiments = []
    modes = ['simple', 'adaptive', 'learnable_center', 'momentum']
    
    for mode in modes:
        experiments.extend([
            ExperimentConfig(
                name=f"qk_{mode}",
                description=f"QK —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ {mode}",
                max_iters=500,
                center_qk=True,
                centering_mode=mode
            ),
            ExperimentConfig(
                name=f"embeddings_{mode}",
                description=f"Embeddings —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ {mode}",
                max_iters=500,
                center_embeddings=True,
                centering_mode=mode
            )
        ])
    
    return experiments

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
    
    print("üß™ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–û–í –° –¶–ï–ù–¢–†–ò–†–û–í–ê–ù–ò–ï–ú")
    print("=" * 80)
    
    # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è –¥–ª—è –≤—Å–µ—Ö
    base_config = BaseModelConfig(
        n_layer=12,
        n_head=12,
        n_embd=768,
        dropout=0.1
    )
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    system = UniversalExperimentSystem(base_config)
    
    # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–±–æ—Ä —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
    print("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–±–æ—Ä —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤:")
    print("1. –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã (17 —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤, ~3 –º–∏–Ω)")
    print("2. –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å —Ä–µ–∂–∏–º–∞–º–∏ (8 —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤, ~1 –º–∏–Ω)")
    print("3. –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã (4 —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞, ~1 –º–∏–Ω)")
    
    choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
    
    if choice == "1":
        experiments = create_comprehensive_experiments()
    elif choice == "2":
        experiments = create_mode_experiments()
    elif choice == "3":
        experiments = [
            ExperimentConfig("baseline_quick", "–ë—ã—Å—Ç—Ä—ã–π baseline", 200),
            ExperimentConfig("qk_quick", "–ë—ã—Å—Ç—Ä—ã–π QK", 200, center_qk=True),
            ExperimentConfig("embeddings_quick", "–ë—ã—Å—Ç—Ä—ã–π Embeddings", 200, center_embeddings=True),
            ExperimentConfig("combined_quick", "–ë—ã—Å—Ç—Ä—ã–π –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", 200, center_qk=True, center_embeddings=True)
        ]
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã")
        experiments = create_comprehensive_experiments()[:4]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã
    system.add_experiments_batch(experiments)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã
    results = system.run_all_experiments()
    
    return results

if __name__ == "__main__":
    main()
