#!/usr/bin/env python3
"""
–£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –±—É–¥—É—â–∏—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
"""

import os
import shutil
import glob
from datetime import datetime
from typing import List, Dict, Set

class ProjectCleaner:
    """–£–º–Ω—ã–π –æ—á–∏—Å—Ç–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self):
        self.files_to_keep = set()
        self.files_to_remove = set()
        self.dirs_to_remove = set()
        self.backup_created = False
        
    def analyze_project(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —á—Ç–æ –æ—Å—Ç–∞–≤–∏—Ç—å, –∞ —á—Ç–æ —É–¥–∞–ª–∏—Ç—å"""
        
        print("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ï–ö–¢–ê")
        print("=" * 50)
        
        # –§–ê–ô–õ–´, –ö–û–¢–û–†–´–ï –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –û–°–¢–ê–í–õ–Ø–ï–ú
        essential_files = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
            'model.py',                    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å GPT
            'train.py',                    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –æ–±—É—á–µ–Ω–∏—è
            'sample.py',                   # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            'configurator.py',             # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä
            'bench.py',                    # –ë–µ–Ω—á–º–∞—Ä–∫–∏
            
            # –ù–∞—à–∏ –ª—É—á—à–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            'model_advanced_centering.py', # –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            'train_advanced_centered.py',  # –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            'sample_centered.py',          # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
            'universal_experiment_system.py',  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
            'experiment_analyzer.py',          # –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
            'run_top3_1000iters.py',          # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            'test_generation_quality_final.py', # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            'analyze_final_1000iters.py',      # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            'final_generation_analysis.py',    # –ê–Ω–∞–ª–∏–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
            # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
            'VECTOR_CENTERING_RESEARCH.md',
            'PRACTICAL_APPLICATIONS.md', 
            'PROJECT_SUMMARY.md',
            'MONITORING_README.md',
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
            'README.md',
            'LICENSE',
            '.gitignore',
            'requirements.txt',
            
            # Jupyter notebooks
            'scaling_laws.ipynb',
            'transformer_sizing.ipynb'
        }
        
        # –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò, –ö–û–¢–û–†–´–ï –û–°–¢–ê–í–õ–Ø–ï–ú
        essential_configs = {
            # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            'config/train_shakespeare_char.py',
            'config/train_shakespeare_bpe.py', 
            'config/train_gpt2.py',
            'config/finetune_shakespeare.py',
            'config/eval_gpt2.py',
            'config/eval_gpt2_large.py',
            'config/eval_gpt2_medium.py',
            'config/eval_gpt2_xl.py',
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–µ –ª—É—á—à–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            'config/final_aggressive_all_1000.py',  # –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å
            'config/final_value_centered_1000.py',  # –í—Ç–æ—Ä–æ–π –ª—É—á—à–∏–π
            'config/final_baseline_1000.py',        # Baseline –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        }
        
        # –ü–ê–ü–ö–ò –° –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú–ò, –ö–û–¢–û–†–´–ï –û–°–¢–ê–í–õ–Ø–ï–ú
        essential_result_dirs = {
            # –§–∏–Ω–∞–ª—å–Ω—ã–µ –ª—É—á—à–∏–µ –º–æ–¥–µ–ª–∏
            'out-final-aggressive_all_1000',   # –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å
            'out-final-value_centered_1000',   # –í—Ç–æ—Ä–∞—è –ª—É—á—à–∞—è
            'out-final-baseline_1000',         # Baseline
            
            # –ü–∞–ø–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
            'data',
            'assets',
            'training_plots'  # –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑—ã
        }
        
        self.files_to_keep.update(essential_files)
        self.files_to_keep.update(essential_configs)
        
        return essential_files, essential_configs, essential_result_dirs
    
    def scan_files_to_remove(self):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        
        print("\nüóëÔ∏è  –ü–û–ò–°–ö –§–ê–ô–õ–û–í –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø")
        print("=" * 50)
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        patterns_to_remove = [
            'training_log_*.log',           # –°—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
            'extracted_results_*.json',     # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            'universal_experiments_results_*.json',  # –°—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
            'top4_500iters_results_*.json', # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            'final_top3_1000iters_results_*.json',  # –ú–æ–∂–µ–º –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π
            '*.pyc',                        # –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Python —Ñ–∞–π–ª—ã
            '__pycache__',                  # –ö—ç—à Python
        ]
        
        files_found = []
        
        for pattern in patterns_to_remove:
            matches = glob.glob(pattern, recursive=True)
            files_found.extend(matches)
            
        # –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ)
        experimental_scripts = [
            'test_centering.py',
            'test_advanced_centering.py', 
            'test_advanced_centering_simple.py',
            'train_centering_experiments.py',
            'train_centering_experiments_bpe.py',
            'advanced_centering_experiments.py',
            'run_best_advanced_1k.py',
            'train_best_models_2k.py',
            'create_comparison_plots.py',
            'create_final_comparison.py',
            'plot_training.py',
            'plot_training_advanced.py',
            'plot_training_improved.py',
            'train_with_logging.py',
            'analyze_training.sh',
            'compare_generation.py',
            'test_advanced_generation.py',
            'comprehensive_generation_test.py',
            'extract_results_from_checkpoints.py',
            'visualize_universal_results.py',
            'run_top4_500iters.py',
            'analyze_top4_500iters.py',
        ]
        
        for script in experimental_scripts:
            if os.path.exists(script):
                files_found.append(script)
        
        self.files_to_remove.update(files_found)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {len(files_found)}")
        return files_found
    
    def scan_configs_to_remove(self):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        
        print("\nüóëÔ∏è  –ü–û–ò–°–ö –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø")
        print("=" * 50)
        
        # –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        all_configs = glob.glob('config/*.py')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –æ—Å—Ç–∞–≤–∏—Ç—å
        essential_configs = {
            'config/train_shakespeare_char.py',
            'config/train_shakespeare_bpe.py', 
            'config/train_gpt2.py',
            'config/finetune_shakespeare.py',
            'config/eval_gpt2.py',
            'config/eval_gpt2_large.py',
            'config/eval_gpt2_medium.py',
            'config/eval_gpt2_xl.py',
            'config/final_aggressive_all_1000.py',
            'config/final_value_centered_1000.py',
            'config/final_baseline_1000.py',
        }
        
        configs_to_remove = []
        for config in all_configs:
            if config not in essential_configs:
                configs_to_remove.append(config)
        
        self.files_to_remove.update(configs_to_remove)
        
        print(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –≤—Å–µ–≥–æ: {len(all_configs)}")
        print(f"üìä –û—Å—Ç–∞–≤–ª—è–µ–º: {len(essential_configs)}")
        print(f"üìä –£–¥–∞–ª—è–µ–º: {len(configs_to_remove)}")
        
        return configs_to_remove
    
    def scan_result_dirs_to_remove(self):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        
        print("\nüóëÔ∏è  –ü–û–ò–°–ö –ü–ê–ü–û–ö –° –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú–ò –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø")
        print("=" * 50)
        
        # –í—Å–µ –ø–∞–ø–∫–∏ out-*
        all_out_dirs = glob.glob('out-*')
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ª—É—á—à–∏–µ
        essential_dirs = {
            'out-final-aggressive_all_1000',
            'out-final-value_centered_1000', 
            'out-final-baseline_1000',
        }
        
        dirs_to_remove = []
        total_size = 0
        
        for out_dir in all_out_dirs:
            if out_dir not in essential_dirs:
                dirs_to_remove.append(out_dir)
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                try:
                    dir_size = sum(
                        os.path.getsize(os.path.join(dirpath, filename))
                        for dirpath, dirnames, filenames in os.walk(out_dir)
                        for filename in filenames
                    )
                    total_size += dir_size
                except:
                    pass
        
        self.dirs_to_remove.update(dirs_to_remove)
        
        print(f"üìä –ü–∞–ø–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Å–µ–≥–æ: {len(all_out_dirs)}")
        print(f"üìä –û—Å—Ç–∞–≤–ª—è–µ–º: {len(essential_dirs)}")
        print(f"üìä –£–¥–∞–ª—è–µ–º: {len(dirs_to_remove)}")
        print(f"üíæ –û—Å–≤–æ–±–æ–¥–∏–º –º–µ—Å—Ç–∞: ~{total_size / (1024**3):.1f} –ì–ë")
        
        return dirs_to_remove, total_size
    
    def create_backup(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_dir = f'backup_before_cleanup_{timestamp}'
        
        print(f"\nüíæ –°–û–ó–î–ê–ù–ò–ï –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò")
        print("=" * 50)
        print(f"üìÅ –ü–∞–ø–∫–∞: {backup_dir}")
        
        os.makedirs(backup_dir, exist_ok=True)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
        important_files = [
            'universal_experiment_system.py',
            'final_generation_analysis.py',
            'analyze_final_1000iters.py',
        ]
        
        for file in important_files:
            if os.path.exists(file):
                shutil.copy2(file, backup_dir)
                print(f"   üíæ {file}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã JSON
        result_files = glob.glob('final_top3_1000iters_results_*.json')
        for file in result_files:
            shutil.copy2(file, backup_dir)
            print(f"   üíæ {file}")
        
        self.backup_created = True
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        
        return backup_dir
    
    def preview_cleanup(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é —Ç–æ–≥–æ, —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ"""
        
        print(f"\nüëÄ –ü–†–ï–í–¨–Æ –û–ß–ò–°–¢–ö–ò")
        print("=" * 50)
        
        essential_files, essential_configs, essential_dirs = self.analyze_project()
        files_to_remove = self.scan_files_to_remove()
        configs_to_remove = self.scan_configs_to_remove()
        dirs_to_remove, total_size = self.scan_result_dirs_to_remove()
        
        print(f"\nüìä –°–í–û–î–ö–ê:")
        print(f"   üóëÔ∏è  –§–∞–π–ª–æ–≤ –∫ —É–¥–∞–ª–µ–Ω–∏—é: {len(self.files_to_remove)}")
        print(f"   üóëÔ∏è  –ü–∞–ø–æ–∫ –∫ —É–¥–∞–ª–µ–Ω–∏—é: {len(self.dirs_to_remove)}")
        print(f"   üíæ –ú–µ—Å—Ç–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è: ~{total_size / (1024**3):.1f} –ì–ë")
        
        print(f"\n‚úÖ –û–°–¢–ê–ù–ï–¢–°–Ø:")
        print(f"   üìÑ –û—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(essential_files)}")
        print(f"   ‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {len(essential_configs)}")
        print(f"   üìÅ –ü–∞–ø–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(essential_dirs)}")
        
        return len(self.files_to_remove), len(self.dirs_to_remove), total_size
    
    def execute_cleanup(self, create_backup=True):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É"""
        
        if create_backup:
            backup_dir = self.create_backup()
        
        print(f"\nüßπ –í–´–ü–û–õ–ù–ï–ù–ò–ï –û–ß–ò–°–¢–ö–ò")
        print("=" * 50)
        
        removed_files = 0
        removed_dirs = 0
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
        for file in self.files_to_remove:
            try:
                if os.path.exists(file):
                    os.remove(file)
                    print(f"   üóëÔ∏è  {file}")
                    removed_files += 1
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file}: {e}")
        
        # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫–∏
        for dir_path in self.dirs_to_remove:
            try:
                if os.path.exists(dir_path):
                    shutil.rmtree(dir_path)
                    print(f"   üóëÔ∏è  üìÅ {dir_path}")
                    removed_dirs += 1
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {dir_path}: {e}")
        
        print(f"\n‚úÖ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"   üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {removed_files}")
        print(f"   üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –ø–∞–ø–æ–∫: {removed_dirs}")
        
        if create_backup and self.backup_created:
            print(f"   üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_dir}")
        
        return removed_files, removed_dirs

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üßπ –£–ú–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ü–†–û–ï–ö–¢–ê nanoGPT")
    print("=" * 60)
    print("üéØ –¶–µ–ª—å: –£–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤")
    print("üí° –°–æ—Ö—Ä–∞–Ω–∏—Ç—å: —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –±—É–¥—É—â–∏—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤")
    print("=" * 60)
    
    cleaner = ProjectCleaner()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
    num_files, num_dirs, size_gb = cleaner.preview_cleanup()
    
    print(f"\n‚ùì –í–´–ü–û–õ–ù–ò–¢–¨ –û–ß–ò–°–¢–ö–£?")
    print(f"   üóëÔ∏è  –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ: {num_files} —Ñ–∞–π–ª–æ–≤, {num_dirs} –ø–∞–ø–æ–∫")
    print(f"   üíæ –û—Å–≤–æ–±–æ–¥–∏—Ç—Å—è: ~{size_gb / (1024**3):.1f} –ì–ë")
    print(f"   üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: –î–ê")
    
    choice = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").strip().lower()
    
    if choice in ['y', 'yes', '–¥–∞']:
        removed_files, removed_dirs = cleaner.execute_cleanup(create_backup=True)
        
        print(f"\nüéâ –ü–†–û–ï–ö–¢ –û–ß–ò–©–ï–ù!")
        print("‚úÖ –û—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –±—É–¥—É—â–∏—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤")
        print("‚úÖ –õ—É—á—à–∏–µ –º–æ–¥–µ–ª–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
    else:
        print("\n‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        print("üí° –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ 'y'")

if __name__ == "__main__":
    main()
