#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import os
import re
import json
from pathlib import Path
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import numpy as np

def extract_final_loss_from_checkpoint(checkpoint_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π loss –∏–∑ checkpoint"""
    try:
        import torch
        checkpoint = torch.load(checkpoint_path, map_location='cpu')
        return checkpoint.get('best_val_loss', None)
    except:
        return None

def parse_experiment_results():
    """–ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
    experiments = [
        'baseline', 'qk_centered', 'final_centered', 
        'full_centered', 'momentum_centered'
    ]
    
    results = {}
    
    for exp_name in experiments:
        out_dir = f"out-centering-{exp_name}"
        checkpoint_path = os.path.join(out_dir, 'ckpt.pt')
        
        if os.path.exists(checkpoint_path):
            final_loss = extract_final_loss_from_checkpoint(checkpoint_path)
            
            # –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ª–æ–≥–∞—Ö
            log_info = {}
            
            results[exp_name] = {
                'final_val_loss': final_loss,
                'checkpoint_exists': True,
                'log_info': log_info
            }
        else:
            results[exp_name] = {
                'final_val_loss': None,
                'checkpoint_exists': False,
                'log_info': {}
            }
    
    return results

def create_comparison_plot(results):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    valid_results = {k: v for k, v in results.items() 
                    if v['final_val_loss'] is not None}
    
    if not valid_results:
        print("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    exp_names = list(valid_results.keys())
    final_losses = [valid_results[name]['final_val_loss'] for name in exp_names]
    
    # –ö—Ä–∞—Å–∏–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
    pretty_names = {
        'baseline': '–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å',
        'qk_centered': '–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ Q/K',
        'final_centered': '–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤',
        'full_centered': '–ü–æ–ª–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ',
        'momentum_centered': '–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å momentum'
    }
    
    display_names = [pretty_names.get(name, name) for name in exp_names]
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(12, 8))
    
    # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
    colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']
    
    bars = plt.bar(range(len(exp_names)), final_losses, color=colors[:len(exp_names)])
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.xlabel('–¢–∏–ø —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞', fontsize=12)
    plt.ylabel('–§–∏–Ω–∞–ª—å–Ω—ã–π validation loss', fontsize=12)
    plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤–µ–∫—Ç–æ—Ä–æ–≤', fontsize=14, pad=20)
    plt.xticks(range(len(exp_names)), display_names, rotation=45, ha='right')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for i, (bar, loss) in enumerate(zip(bars, final_losses)):
        plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.01,
                f'{loss:.4f}', ha='center', va='bottom', fontweight='bold')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É
    plt.grid(True, alpha=0.3, axis='y')
    
    # –í—ã–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    best_idx = np.argmin(final_losses)
    bars[best_idx].set_color('#2ca02c')
    bars[best_idx].set_edgecolor('black')
    bars[best_idx].set_linewidth(2)
    
    plt.tight_layout()
    plt.savefig('centering_comparison.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return exp_names[best_idx], final_losses[best_idx]

def generate_samples_comparison():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–∑—Ü—ã —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    experiments = ['baseline', 'qk_centered', 'final_centered', 'full_centered', 'momentum_centered']
    
    print("\nüé≠ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:")
    print("=" * 60)
    
    for exp_name in experiments:
        out_dir = f"out-centering-{exp_name}"
        
        if os.path.exists(out_dir):
            print(f"\n--- {exp_name.upper()} ---")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–∑–µ—Ü
            cmd = f"python sample.py --out_dir={out_dir} --num_samples=1 --max_new_tokens=100 --start='ROMEO:'"
            
            try:
                import subprocess
                result = subprocess.run(cmd.split(), capture_output=True, text=True, timeout=30)
                
                if result.returncode == 0:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    output_lines = result.stdout.split('\n')
                    in_sample = False
                    sample_text = []
                    
                    for line in output_lines:
                        if '---------------' in line:
                            in_sample = not in_sample
                            continue
                        if in_sample and line.strip():
                            sample_text.append(line.strip())
                    
                    if sample_text:
                        print(' '.join(sample_text))
                    else:
                        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –æ–±—Ä–∞–∑–µ—Ü")
                else:
                    print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result.stderr}")
                    
            except subprocess.TimeoutExpired:
                print("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")

def main():
    print("üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤–µ–∫—Ç–æ—Ä–æ–≤")
    print("=" * 70)
    
    # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = parse_experiment_results()
    
    print("\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤:")
    print("-" * 50)
    
    for exp_name, data in results.items():
        status = "‚úÖ" if data['checkpoint_exists'] else "‚ùå"
        loss_str = f"{data['final_val_loss']:.4f}" if data['final_val_loss'] else "N/A"
        print(f"{status} {exp_name:20} | Final val loss: {loss_str}")
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    try:
        best_exp, best_loss = create_comparison_plot(results)
        print(f"\nüèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_exp} (val loss: {best_loss:.4f})")
        print("üìä –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω: centering_comparison.png")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–∑—Ü—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    try:
        generate_samples_comparison()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–∑—Ü–æ–≤: {e}")
    
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()
