#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import os
import subprocess
import sys

def test_model_generation(model_dir, model_name, prompt="ROMEO:", max_tokens=150):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    
    if not os.path.exists(f"{model_dir}/ckpt.pt"):
        print(f"‚ùå {model_name}: Checkpoint –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    print(f"\nüé≠ {model_name.upper()}")
    print("=" * 60)
    
    cmd = [
        'python', 'sample_centered.py',
        f'--out_dir={model_dir}',
        '--num_samples=1',
        f'--max_new_tokens={max_tokens}',
        f'--start={prompt}',
        '--temperature=0.8',
        '--top_k=200'
    ]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)
        
        if result.returncode == 0:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            output_lines = result.stdout.split('\n')
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            start_found = False
            generated_text = []
            
            for line in output_lines:
                if prompt in line and not start_found:
                    start_found = True
                    generated_text.append(line)
                elif start_found and '---------------' in line:
                    break
                elif start_found:
                    generated_text.append(line)
            
            if generated_text:
                print('\n'.join(generated_text))
                return '\n'.join(generated_text)
            else:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
                return None
        else:
            print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result.stderr}")
            return None
            
    except subprocess.TimeoutExpired:
        print("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return None

def main():
    print("üé≠ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
    print("=" * 70)
    
    # –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    models = [
        ("out-centering-bpe-baseline_bpe", "Baseline (–±–µ–∑ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è)"),
        ("out-centering-bpe-qk_centered_bpe", "QK Centered (—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ query/key)"),
        ("out-centering-bpe-final_centered_bpe", "Final Centered (—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤)"),
        ("out-centering-bpe-full_centered_bpe", "Full Centered (–ø–æ–ª–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ)"),
        ("out-centering-bpe-block_centered_bpe", "Block Centered (—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–æ–≤ –±–ª–æ–∫–æ–≤)"),
    ]
    
    # –†–∞–∑–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    prompts = [
        "ROMEO:",
        "JULIET:",
        "To be or not to be",
        "HAMLET:",
        "What light through yonder window"
    ]
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç
    if len(sys.argv) > 1:
        prompt = sys.argv[1]
    else:
        prompt = prompts[0]  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ROMEO:
    
    print(f"üéØ –ü—Ä–æ–º–ø—Ç: '{prompt}'")
    print(f"üìù –î–ª–∏–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: 150 —Ç–æ–∫–µ–Ω–æ–≤")
    
    results = {}
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏
    for model_dir, model_name in models:
        generated_text = test_model_generation(model_dir, model_name, prompt)
        if generated_text:
            results[model_name] = generated_text
    
    # –ö—Ä–∞—Ç–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    print(f"\n{'='*70}")
    print("üìä –ö–†–ê–¢–ö–û–ï –°–†–ê–í–ù–ï–ù–ò–ï:")
    print(f"{'='*70}")
    
    for model_name, text in results.items():
        lines = text.split('\n')
        first_lines = lines[:3]  # –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏
        preview = ' '.join(first_lines).replace('\n', ' ').strip()
        if len(preview) > 80:
            preview = preview[:77] + "..."
        
        print(f"\nüé≠ {model_name}:")
        print(f"   {preview}")
    
    print(f"\n‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(results)}")
    
    if len(results) > 0:
        print(f"\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –¥—Ä—É–≥–∏–º –ø—Ä–æ–º–ø—Ç–æ–º:")
        print(f"   python {sys.argv[0]} \"JULIET:\"")
        print(f"   python {sys.argv[0]} \"To be or not to be\"")

if __name__ == "__main__":
    main()
