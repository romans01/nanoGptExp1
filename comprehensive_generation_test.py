#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª—É—á—à–∏—Ö –º–æ–¥–µ–ª–µ–π —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 500 —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
"""

import os
import subprocess
import time
from datetime import datetime

def test_model_generation(model_path, model_name, script_name, prompt, max_tokens=500):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    
    print(f"\nüé≠ {model_name}")
    print("=" * 60)
    print(f"üìÅ –ú–æ–¥–µ–ª—å: {model_path}")
    print(f"üéØ –ü—Ä–æ–º–ø—Ç: '{prompt}'")
    print(f"üìä –¢–æ–∫–µ–Ω–æ–≤: {max_tokens}")
    print("-" * 60)
    
    if not os.path.exists(model_path):
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        return None
    
    try:
        cmd = [
            'python', script_name,
            '--out_dir', model_path,
            '--start', prompt,
            '--num_samples', '1',
            '--max_new_tokens', str(max_tokens),
            '--temperature', '0.8',
            '--top_k', '200'
        ]
        
        print(f"üîÑ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
        start_time = time.time()
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=120)
        
        generation_time = time.time() - start_time
        
        if result.returncode == 0:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            output_lines = result.stdout.strip().split('\n')
            
            # –ò—â–µ–º –Ω–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            generation_started = False
            generated_text = []
            
            for line in output_lines:
                if prompt in line and not generation_started:
                    generation_started = True
                    generated_text.append(line)
                elif generation_started and not line.startswith('---------------'):
                    generated_text.append(line)
                elif line.startswith('---------------'):
                    break
            
            if generated_text:
                full_text = '\n'.join(generated_text)
                print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {generation_time:.1f}—Å")
                print(f"üìù –î–ª–∏–Ω–∞: {len(full_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                print()
                print(full_text)
                print()
                return {
                    'text': full_text,
                    'time': generation_time,
                    'length': len(full_text),
                    'success': True
                }
            else:
                print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
                return {'success': False, 'error': 'Extraction failed'}
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result.stderr[:200]}")
            return {'success': False, 'error': result.stderr[:200]}
            
    except subprocess.TimeoutExpired:
        print("‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (120—Å)")
        return {'success': False, 'error': 'Timeout'}
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return {'success': False, 'error': str(e)}

def comprehensive_comparison():
    """–ü—Ä–æ–≤–æ–¥–∏—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –º–æ–¥–µ–ª–µ–π"""
    
    print("üé≠ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò (500 –¢–û–ö–ï–ù–û–í)")
    print("=" * 80)
    
    # –õ—É—á—à–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º 1K —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
    models = [
        {
            'path': 'out-advanced-1k-baseline_1k',
            'name': 'üìä BASELINE 1K',
            'script': 'sample.py',
            'description': '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ (–±–µ–∑ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è)'
        },
        {
            'path': 'out-advanced-1k-embeddings_centered_1k', 
            'name': 'ü•á EMBEDDINGS CENTERED 1K',
            'script': 'sample_centered.py',
            'description': '–ü–û–ë–ï–î–ò–¢–ï–õ–¨: +2.26% —É–ª—É—á—à–µ–Ω–∏–µ'
        },
        {
            'path': 'out-advanced-1k-qk_plus_value_1k',
            'name': 'ü•à QK + VALUE 1K',
            'script': 'sample_centered.py',
            'description': '2-–µ –º–µ—Å—Ç–æ: +1.89% —É–ª—É—á—à–µ–Ω–∏–µ'
        },
        {
            'path': 'out-advanced-1k-value_centered_1k',
            'name': 'ü•â VALUE CENTERED 1K',
            'script': 'sample_centered.py',
            'description': '3-–µ –º–µ—Å—Ç–æ: +1.13% —É–ª—É—á—à–µ–Ω–∏–µ'
        }
    ]
    
    # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    prompts = [
        "ROMEO:",
        "JULIET:",
        "To be or not to be",
        "Once upon a time in a kingdom far away",
        "The meaning of life is"
    ]
    
    all_results = {}
    
    for prompt in prompts:
        print(f"\n{'='*80}")
        print(f"üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ú–ü–¢–ê: '{prompt}'")
        print(f"{'='*80}")
        
        prompt_results = {}
        
        for model in models:
            result = test_model_generation(
                model['path'],
                model['name'],
                model['script'],
                prompt,
                max_tokens=500
            )
            
            if result:
                prompt_results[model['name']] = {
                    'result': result,
                    'description': model['description']
                }
        
        all_results[prompt] = prompt_results
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–º–ø—Ç–∞–º–∏
        time.sleep(2)
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    create_detailed_report(all_results)
    
    return all_results

def create_detailed_report(all_results):
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_path = f"training_plots/comprehensive_generation_report_{timestamp}.txt"
    
    os.makedirs('training_plots', exist_ok=True)
    
    print(f"\nüìä –°–û–ó–î–ê–ù–ò–ï –î–ï–¢–ê–õ–¨–ù–û–ì–û –û–¢–ß–ï–¢–ê...")
    
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write("üé≠ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò (500 –¢–û–ö–ï–ù–û–í)\n")
        f.write("=" * 80 + "\n\n")
        
        f.write("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–û–í:\n")
        f.write("ü•á Embeddings Centered: +2.26% —É–ª—É—á—à–µ–Ω–∏–µ validation loss\n")
        f.write("ü•à QK + Value: +1.89% —É–ª—É—á—à–µ–Ω–∏–µ validation loss\n") 
        f.write("ü•â Value Centered: +1.13% —É–ª—É—á—à–µ–Ω–∏–µ validation loss\n")
        f.write("üìä Baseline: –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞\n\n")
        
        f.write("üéØ –ü–ê–†–ê–ú–ï–¢–†–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:\n")
        f.write("‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤: 500\n")
        f.write("‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 0.8\n")
        f.write("‚Ä¢ Top-K: 200\n")
        f.write("‚Ä¢ –ú–æ–¥–µ–ª–∏: –æ–±—É—á–µ–Ω—ã –Ω–∞ 1000 –∏—Ç–µ—Ä–∞—Ü–∏–π\n\n")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–º–ø—Ç—É
        for prompt, prompt_results in all_results.items():
            f.write(f"\n{'='*80}\n")
            f.write(f"üéØ –ü–†–û–ú–ü–¢: '{prompt}'\n")
            f.write(f"{'='*80}\n\n")
            
            # –°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            f.write("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò:\n")
            f.write("-" * 40 + "\n")
            
            for model_name, data in prompt_results.items():
                if data['result']['success']:
                    result = data['result']
                    f.write(f"{model_name}:\n")
                    f.write(f"  üìù –î–ª–∏–Ω–∞: {result['length']} —Å–∏–º–≤–æ–ª–æ–≤\n")
                    f.write(f"  ‚è±Ô∏è  –í—Ä–µ–º—è: {result['time']:.1f}—Å\n")
                    f.write(f"  üìã –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n\n")
            
            # –ó–∞—Ç–µ–º –ø–æ–ª–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
            f.write("\nüìù –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ï –¢–ï–ö–°–¢–´:\n")
            f.write("-" * 40 + "\n\n")
            
            for model_name, data in prompt_results.items():
                if data['result']['success']:
                    f.write(f"{model_name}:\n")
                    f.write("-" * 30 + "\n")
                    f.write(f"{data['result']['text']}\n\n")
                    f.write("=" * 60 + "\n\n")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        f.write(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
        f.write("=" * 40 + "\n")
        
        total_stats = {}
        for prompt, prompt_results in all_results.items():
            for model_name, data in prompt_results.items():
                if data['result']['success']:
                    if model_name not in total_stats:
                        total_stats[model_name] = {
                            'total_length': 0,
                            'total_time': 0,
                            'count': 0
                        }
                    
                    total_stats[model_name]['total_length'] += data['result']['length']
                    total_stats[model_name]['total_time'] += data['result']['time']
                    total_stats[model_name]['count'] += 1
        
        for model_name, stats in total_stats.items():
            if stats['count'] > 0:
                avg_length = stats['total_length'] / stats['count']
                avg_time = stats['total_time'] / stats['count']
                f.write(f"\n{model_name}:\n")
                f.write(f"  üìä –¢–µ—Å—Ç–æ–≤: {stats['count']}\n")
                f.write(f"  üìù –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {avg_length:.0f} —Å–∏–º–≤–æ–ª–æ–≤\n")
                f.write(f"  ‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.1f}—Å\n")
        
        f.write(f"\n\nüìÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {timestamp}\n")
        f.write("üéØ –í—Å–µ –º–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã –Ω–∞ 1000 –∏—Ç–µ—Ä–∞—Ü–∏–π Shakespeare BPE\n")
    
    print(f"üíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    
    # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
    print(f"\nüìä –ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("-" * 40)
    
    for model_name, stats in total_stats.items():
        if stats['count'] > 0:
            avg_length = stats['total_length'] / stats['count']
            avg_time = stats['total_time'] / stats['count']
            print(f"{model_name}:")
            print(f"  üìä –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {stats['count']}")
            print(f"  üìù –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {avg_length:.0f} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"  ‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.1f}—Å")
            print()

def analyze_quality_metrics(all_results):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"""
    
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –ú–ï–¢–†–ò–ö")
    print("=" * 50)
    
    quality_analysis = {}
    
    for prompt, prompt_results in all_results.items():
        print(f"\nüéØ –ü—Ä–æ–º–ø—Ç: '{prompt}'")
        print("-" * 30)
        
        for model_name, data in prompt_results.items():
            if data['result']['success']:
                text = data['result']['text']
                
                # –ü—Ä–æ—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                words = text.split()
                unique_words = set(words)
                
                # –®–µ–∫—Å–ø–∏—Ä–æ–≤—Å–∫–∏–µ —Å–ª–æ–≤–∞
                shakespeare_words = ['thou', 'thee', 'thy', 'hath', 'doth', 'art', 'shall', 
                                   'whence', 'wherefore', 'methinks', 'prithee', 'ere']
                shakespeare_count = sum(1 for word in words if word.lower() in shakespeare_words)
                
                # –ü–µ—Ä—Å–æ–Ω–∞–∂–∏
                characters = ['ROMEO', 'JULIET', 'MERCUTIO', 'BENVOLIO', 'NURSE', 'FRIAR', 'CAPULET']
                character_count = sum(1 for char in characters if char in text)
                
                metrics = {
                    'word_count': len(words),
                    'unique_ratio': len(unique_words) / len(words) if words else 0,
                    'shakespeare_density': shakespeare_count / len(words) if words else 0,
                    'character_diversity': character_count
                }
                
                if model_name not in quality_analysis:
                    quality_analysis[model_name] = []
                quality_analysis[model_name].append(metrics)
                
                print(f"  {model_name}:")
                print(f"    üìù –°–ª–æ–≤: {metrics['word_count']}")
                print(f"    üîÑ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: {metrics['unique_ratio']:.2f}")
                print(f"    üé≠ –®–µ–∫—Å–ø–∏—Ä-—Å—Ç–∏–ª—å: {metrics['shakespeare_density']:.3f}")
                print(f"    üë• –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {metrics['character_diversity']}")
    
    # –°—Ä–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    print(f"\nüìä –°–†–ï–î–ù–ò–ï –ú–ï–¢–†–ò–ö–ò –ü–û –ú–û–î–ï–õ–Ø–ú:")
    print("=" * 40)
    
    for model_name, metrics_list in quality_analysis.items():
        if metrics_list:
            avg_metrics = {
                'word_count': sum(m['word_count'] for m in metrics_list) / len(metrics_list),
                'unique_ratio': sum(m['unique_ratio'] for m in metrics_list) / len(metrics_list),
                'shakespeare_density': sum(m['shakespeare_density'] for m in metrics_list) / len(metrics_list),
                'character_diversity': sum(m['character_diversity'] for m in metrics_list) / len(metrics_list)
            }
            
            print(f"\n{model_name}:")
            print(f"  üìù –°—Ä–µ–¥–Ω–µ–µ —Å–ª–æ–≤: {avg_metrics['word_count']:.0f}")
            print(f"  üîÑ –°—Ä–µ–¥–Ω—è—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: {avg_metrics['unique_ratio']:.3f}")
            print(f"  üé≠ –°—Ä–µ–¥–Ω–∏–π –®–µ–∫—Å–ø–∏—Ä-—Å—Ç–∏–ª—å: {avg_metrics['shakespeare_density']:.4f}")
            print(f"  üë• –°—Ä–µ–¥–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏: {avg_metrics['character_diversity']:.1f}")

def main():
    print("üé≠ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò")
    print("üéØ –¶–µ–ª—å: –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (500 —Ç–æ–∫–µ–Ω–æ–≤)")
    print("üìä –ú–æ–¥–µ–ª–∏: –õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã 1K —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤")
    print("‚è±Ô∏è  –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~10-15 –º–∏–Ω—É—Ç")
    
    start_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–µ–π
    required_models = [
        'out-advanced-1k-baseline_1k',
        'out-advanced-1k-embeddings_centered_1k',
        'out-advanced-1k-qk_plus_value_1k',
        'out-advanced-1k-value_centered_1k'
    ]
    
    missing_models = [model for model in required_models if not os.path.exists(model)]
    if missing_models:
        print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏: {missing_models}")
        print("üîÑ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –º–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    all_results = comprehensive_comparison()
    
    if all_results:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        analyze_quality_metrics(all_results)
        
        total_time = time.time() - start_time
        print(f"\nüéâ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}—Å ({total_time/60:.1f} –º–∏–Ω)")
        print(f"üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–º–ø—Ç–æ–≤: {len(all_results)}")
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ training_plots/")
    else:
        print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")

if __name__ == "__main__":
    main()
