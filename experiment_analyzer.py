#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
"""

import json
import os
import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime
from typing import Dict, List, Any, Optional

class ExperimentAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, results_file: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ñ–∞–π–ª–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        with open(results_file, 'r') as f:
            self.data = json.load(f)
        
        self.results = self.data['results']
        self.successful_results = [r for r in self.results if r['success']]
        
    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–û–í")
        print("=" * 60)
        
        total = len(self.results)
        successful = len(self.successful_results)
        failed = total - successful
        
        print(f"üìà –í—Å–µ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: {total}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed}")
        
        if successful > 0:
            total_time = sum(r['time'] for r in self.successful_results)
            avg_time = total_time / successful
            print(f"‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.1f}—Å")
            print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time/60:.1f} –º–∏–Ω")
            
        print(f"üß† –ë–∞–∑–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {self.data['base_config']['n_layer']} —Å–ª–æ–µ–≤, {self.data['base_config']['n_head']} –≥–æ–ª–æ–≤, {self.data['base_config']['n_embd']} —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
        
    def analyze_by_validation_loss(self, top_n: int = 10):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ validation loss"""
        
        print(f"\nüèÜ –¢–û–ü-{top_n} –ü–û VALIDATION LOSS")
        print("=" * 60)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å validation loss
        results_with_loss = [r for r in self.successful_results if 'final_val_loss' in r]
        
        if not results_with_loss:
            print("‚ö†Ô∏è  –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å validation loss")
            return
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ validation loss
        results_with_loss.sort(key=lambda x: x['final_val_loss'])
        
        # –ù–∞—Ö–æ–¥–∏–º baseline –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        baseline_loss = None
        for r in results_with_loss:
            if 'baseline' in r['name'].lower():
                baseline_loss = r['final_val_loss']
                break
                
        print(f"üìä Baseline validation loss: {baseline_loss:.4f}" if baseline_loss else "‚ö†Ô∏è  Baseline –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print()
        
        for i, result in enumerate(results_with_loss[:top_n], 1):
            val_loss = result['final_val_loss']
            name = result['name']
            description = result['description']
            
            # –í—ã—á–∏—Å–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ baseline
            improvement = ""
            if baseline_loss and val_loss < baseline_loss:
                pct_improvement = ((baseline_loss - val_loss) / baseline_loss) * 100
                improvement = f" (+{pct_improvement:.2f}%)"
            elif baseline_loss and val_loss > baseline_loss:
                pct_degradation = ((val_loss - baseline_loss) / baseline_loss) * 100
                improvement = f" (-{pct_degradation:.2f}%)"
                
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
            print(f"{medal} {name}: {val_loss:.4f}{improvement}")
            print(f"   üìù {description}")
            print()
            
    def analyze_by_centering_type(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–∏–ø–∞–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        print("\nüéØ –ê–ù–ê–õ–ò–ó –ü–û –¢–ò–ü–ê–ú –¶–ï–ù–¢–†–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        centering_groups = {}
        
        for result in self.successful_results:
            if 'final_val_loss' not in result:
                continue
                
            config = result.get('config', {})
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
            active_centering = []
            if config.get('center_qk', False):
                active_centering.append('QK')
            if config.get('center_v', False):
                active_centering.append('V')
            if config.get('center_mlp', False):
                active_centering.append('MLP')
            if config.get('center_embeddings', False):
                active_centering.append('Embeddings')
            if config.get('center_residual', False):
                active_centering.append('Residual')
                
            if not active_centering:
                centering_type = "None (Baseline)"
            else:
                centering_type = " + ".join(active_centering)
                
            if centering_type not in centering_groups:
                centering_groups[centering_type] = []
            centering_groups[centering_type].append(result)
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
        for centering_type, group_results in centering_groups.items():
            if not group_results:
                continue
                
            losses = [r['final_val_loss'] for r in group_results]
            avg_loss = np.mean(losses)
            min_loss = np.min(losses)
            max_loss = np.max(losses)
            
            print(f"üé≠ {centering_type}:")
            print(f"   üìä –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: {len(group_results)}")
            print(f"   üìà –°—Ä–µ–¥–Ω–∏–π loss: {avg_loss:.4f}")
            print(f"   üèÜ –õ—É—á—à–∏–π loss: {min_loss:.4f}")
            if len(group_results) > 1:
                print(f"   üìâ –•—É–¥—à–∏–π loss: {max_loss:.4f}")
            print()
            
    def create_comparison_plot(self, output_file: Optional[str] = None):
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        results_with_loss = [r for r in self.successful_results if 'final_val_loss' in r]
        
        if len(results_with_loss) < 2:
            print("‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞")
            return
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ validation loss
        results_with_loss.sort(key=lambda x: x['final_val_loss'])
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        names = [r['name'] for r in results_with_loss]
        losses = [r['final_val_loss'] for r in results_with_loss]
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(15, 8))
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        colors = ['gold' if i == 0 else 'silver' if i == 1 else 'chocolate' if i == 2 else 'lightblue' 
                 for i in range(len(names))]
        
        bars = plt.bar(range(len(names)), losses, color=colors, alpha=0.8, edgecolor='black', linewidth=1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        plt.xlabel('–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã', fontsize=12, fontweight='bold')
        plt.ylabel('Validation Loss', fontsize=12, fontweight='bold')
        plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n(–ú–µ–Ω—å—à–µ = –õ—É—á—à–µ)', 
                 fontsize=14, fontweight='bold')
        
        # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
        plt.xticks(range(len(names)), names, rotation=45, ha='right')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for i, (bar, loss) in enumerate(zip(bars, losses)):
            height = bar.get_height()
            plt.text(bar.get_x() + bar.get_width()/2., height + 0.001,
                    f'{loss:.4f}', ha='center', va='bottom', fontsize=10, fontweight='bold')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∞–ª–∏ –¥–ª—è —Ç–æ–ø-3
            if i == 0:
                plt.text(bar.get_x() + bar.get_width()/2., height/2, 'ü•á', 
                        ha='center', va='center', fontsize=20)
            elif i == 1:
                plt.text(bar.get_x() + bar.get_width()/2., height/2, 'ü•à', 
                        ha='center', va='center', fontsize=20)
            elif i == 2:
                plt.text(bar.get_x() + bar.get_width()/2., height/2, 'ü•â', 
                        ha='center', va='center', fontsize=20)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        plt.grid(axis='y', alpha=0.3, linestyle='--')
        
        # –ü–ª–æ—Ç–Ω–∞—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if output_file is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = f'training_plots/universal_experiments_comparison_{timestamp}.png'
            
        os.makedirs('training_plots', exist_ok=True)
        plt.savefig(output_file, dpi=300, bbox_inches='tight')
        plt.show()
        
        print(f"üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
        
    def create_centering_heatmap(self, output_file: Optional[str] = None):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        results_with_loss = [r for r in self.successful_results if 'final_val_loss' in r]
        
        if len(results_with_loss) < 5:
            print("‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã")
            return
            
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        centering_types = ['center_qk', 'center_v', 'center_mlp', 'center_embeddings', 'center_residual']
        centering_names = ['QK', 'Value', 'MLP', 'Embeddings', 'Residual']
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        matrix_data = []
        experiment_names = []
        
        for result in results_with_loss:
            config = result.get('config', {})
            row = [1 if config.get(ct, False) else 0 for ct in centering_types]
            matrix_data.append(row)
            experiment_names.append(result['name'])
            
        matrix_data = np.array(matrix_data)
        losses = np.array([r['final_val_loss'] for r in results_with_loss])
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))
        
        # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        im1 = ax1.imshow(matrix_data, cmap='RdYlBu_r', aspect='auto')
        ax1.set_xticks(range(len(centering_names)))
        ax1.set_xticklabels(centering_names)
        ax1.set_yticks(range(len(experiment_names)))
        ax1.set_yticklabels(experiment_names)
        ax1.set_title('–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è\n(–ö—Ä–∞—Å–Ω—ã–π = –ê–∫—Ç–∏–≤–µ–Ω)', fontweight='bold')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ —è—á–µ–π–∫–∏
        for i in range(len(experiment_names)):
            for j in range(len(centering_names)):
                text = '‚úì' if matrix_data[i, j] else '‚úó'
                ax1.text(j, i, text, ha="center", va="center", 
                        color="white" if matrix_data[i, j] else "black", fontweight='bold')
        
        # –ì—Ä–∞—Ñ–∏–∫ validation loss
        colors = plt.cm.RdYlGn_r(np.linspace(0.2, 0.8, len(losses)))
        bars = ax2.barh(range(len(experiment_names)), losses, color=colors)
        ax2.set_yticks(range(len(experiment_names)))
        ax2.set_yticklabels(experiment_names)
        ax2.set_xlabel('Validation Loss')
        ax2.set_title('Validation Loss –ø–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º\n(–ú–µ–Ω—å—à–µ = –õ—É—á—à–µ)', fontweight='bold')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for i, (bar, loss) in enumerate(zip(bars, losses)):
            width = bar.get_width()
            ax2.text(width + 0.001, bar.get_y() + bar.get_height()/2,
                    f'{loss:.4f}', ha='left', va='center', fontsize=9, fontweight='bold')
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if output_file is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = f'training_plots/centering_heatmap_{timestamp}.png'
            
        os.makedirs('training_plots', exist_ok=True)
        plt.savefig(output_file, dpi=300, bbox_inches='tight')
        plt.show()
        
        print(f"üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_file}")
        
    def generate_report(self, output_file: Optional[str] = None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç"""
        
        if output_file is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = f'training_plots/universal_experiments_report_{timestamp}.txt'
            
        os.makedirs('training_plots', exist_ok=True)
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("üìä –ü–û–î–†–û–ë–ù–´–ô –û–¢–ß–ï–¢ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–• –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–û–í\n")
            f.write("=" * 80 + "\n\n")
            
            # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            f.write("üìà –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:\n")
            f.write(f"‚Ä¢ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {self.data['timestamp']}\n")
            f.write(f"‚Ä¢ –í—Å–µ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: {len(self.results)}\n")
            f.write(f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {len(self.successful_results)}\n")
            f.write(f"‚Ä¢ –ë–∞–∑–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {self.data['base_config']['n_layer']} —Å–ª–æ–µ–≤, {self.data['base_config']['n_head']} –≥–æ–ª–æ–≤, {self.data['base_config']['n_embd']} —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤\n")
            f.write(f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {self.data['total_time']/60:.1f} –º–∏–Ω—É—Ç\n\n")
            
            # –¢–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results_with_loss = [r for r in self.successful_results if 'final_val_loss' in r]
            if results_with_loss:
                results_with_loss.sort(key=lambda x: x['final_val_loss'])
                
                f.write("üèÜ –¢–û–ü-10 –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ü–û VALIDATION LOSS:\n")
                f.write("-" * 50 + "\n")
                
                # –ù–∞—Ö–æ–¥–∏–º baseline
                baseline_loss = None
                for r in results_with_loss:
                    if 'baseline' in r['name'].lower():
                        baseline_loss = r['final_val_loss']
                        break
                        
                for i, result in enumerate(results_with_loss[:10], 1):
                    val_loss = result['final_val_loss']
                    name = result['name']
                    description = result['description']
                    
                    improvement = ""
                    if baseline_loss and val_loss != baseline_loss:
                        pct_change = ((baseline_loss - val_loss) / baseline_loss) * 100
                        improvement = f" ({pct_change:+.2f}%)"
                        
                    medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i:2d}."
                    f.write(f"{medal} {name}: {val_loss:.4f}{improvement}\n")
                    f.write(f"    üìù {description}\n\n")
                    
            # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            f.write("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:\n")
            f.write("=" * 50 + "\n")
            
            for result in self.successful_results:
                f.write(f"\nüß™ {result['name']}:\n")
                f.write(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {result['description']}\n")
                f.write(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {result['time']:.1f}—Å\n")
                
                if 'final_val_loss' in result:
                    f.write(f"   üìä Validation Loss: {result['final_val_loss']:.4f}\n")
                if 'final_train_loss' in result:
                    f.write(f"   üìà Training Loss: {result['final_train_loss']:.4f}\n")
                    
                # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
                config = result.get('config', {})
                centering_active = []
                if config.get('center_qk', False):
                    centering_active.append('QK')
                if config.get('center_v', False):
                    centering_active.append('Value')
                if config.get('center_mlp', False):
                    centering_active.append('MLP')
                if config.get('center_embeddings', False):
                    centering_active.append('Embeddings')
                if config.get('center_residual', False):
                    centering_active.append('Residual')
                    
                if centering_active:
                    f.write(f"   üéØ –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ: {', '.join(centering_active)}\n")
                    f.write(f"   üîß –†–µ–∂–∏–º: {config.get('centering_mode', 'adaptive')}\n")
                else:
                    f.write(f"   üéØ –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (Baseline)\n")
                    
        print(f"üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result_files = [f for f in os.listdir('.') if f.startswith('universal_experiments_results_')]
    
    if not result_files:
        print("‚ùå –§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ universal_experiment_system.py")
        return
        
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
    latest_file = sorted(result_files)[-1]
    print(f"üìÇ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: {latest_file}")
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = ExperimentAnalyzer(latest_file)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
    analyzer.print_summary()
    analyzer.analyze_by_validation_loss()
    analyzer.analyze_by_centering_type()
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    analyzer.create_comparison_plot()
    analyzer.create_centering_heatmap()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    analyzer.generate_report()
    
    print("\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ training_plots/")

if __name__ == "__main__":
    main()
