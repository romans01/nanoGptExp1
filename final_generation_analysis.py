#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
"""

import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime
import os

def analyze_generation_quality():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    print("üé≠ –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ì–ï–ù–ï–†–ê–¶–ò–ò")
    print("=" * 70)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    generation_results = {
        "Aggressive All": {
            "validation_loss": 4.8281,
            "quality_score": 0.650,
            "success_rate": 0.60,
            "avg_words": 323.3,
            "uniqueness": 0.470,
            "coherence": 0.043,
            "characters": 17.0,
            "dialogues": 27.3,
            "generation_time": 4.9,
            "rank_by_loss": 1,
            "rank_by_generation": 1
        },
        "Value Centered": {
            "validation_loss": 4.9422,
            "quality_score": 0.638,
            "success_rate": 0.60,
            "avg_words": 335.7,
            "uniqueness": 0.440,
            "coherence": 0.032,
            "characters": 17.3,
            "dialogues": 27.3,
            "generation_time": 4.3,
            "rank_by_loss": 2,
            "rank_by_generation": 3
        },
        "Baseline": {
            "validation_loss": 4.9616,
            "quality_score": 0.649,
            "success_rate": 0.60,
            "avg_words": 318.3,
            "uniqueness": 0.468,
            "coherence": 0.042,
            "characters": 15.3,
            "dialogues": 27.7,
            "generation_time": 4.0,
            "rank_by_loss": 3,
            "rank_by_generation": 2
        }
    }
    
    print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("-" * 50)
    
    for model, data in generation_results.items():
        print(f"\nüéØ {model.upper()}:")
        print(f"   üìä Validation Loss: {data['validation_loss']:.4f} (#{data['rank_by_loss']})")
        print(f"   üèÜ –ö–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {data['quality_score']:.3f} (#{data['rank_by_generation']})")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {data['success_rate']*100:.0f}%")
        print(f"   üî§ –°–ª–æ–≤: {data['avg_words']:.1f}")
        print(f"   üîÑ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: {data['uniqueness']:.3f}")
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {data['generation_time']:.1f}—Å")
    
    return generation_results

def create_comprehensive_comparison():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"""
    
    results = analyze_generation_quality()
    
    print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï:")
    print("=" * 60)
    
    print("üèÜ –ö–û–†–†–ï–õ–Ø–¶–ò–Ø VALIDATION LOSS vs –ö–ê–ß–ï–°–¢–í–û –ì–ï–ù–ï–†–ê–¶–ò–ò:")
    print("-" * 55)
    
    for model, data in results.items():
        loss_rank = data['rank_by_loss']
        gen_rank = data['rank_by_generation']
        
        if loss_rank == gen_rank:
            correlation = "‚úÖ –°–û–í–ü–ê–î–ê–ï–¢"
        elif abs(loss_rank - gen_rank) == 1:
            correlation = "üìä –ë–õ–ò–ó–ö–û"
        else:
            correlation = "‚ùå –†–ê–°–•–û–î–ò–¢–°–Ø"
            
        print(f"   {model}: Loss #{loss_rank} vs Gen #{gen_rank} - {correlation}")
    
    print(f"\nüí° –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–ë–õ–Æ–î–ï–ù–ò–Ø:")
    print("-" * 30)
    
    print("1. üéØ AGGRESSIVE ALL:")
    print("   ‚Ä¢ –õ—É—á—à–∏–π –ø–æ validation loss –ò –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    print("   ‚Ä¢ –í—ã—Å–æ–∫–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ (0.470)")
    print("   ‚Ä¢ –ú–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –¥–∏–∞–ª–æ–≥–æ–≤")
    print("   ‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä –Ω–∞ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫–∞—Ö")
    print()
    
    print("2. üìä BASELINE vs VALUE:")
    print("   ‚Ä¢ Baseline: —Ö—É–∂–µ –ø–æ loss, –Ω–æ –ª—É—á—à–µ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    print("   ‚Ä¢ Value: –ª—É—á—à–µ –ø–æ loss, –Ω–æ —Ö—É–∂–µ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    print("   ‚Ä¢ Baseline –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à—É—é —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å (0.468 vs 0.440)")
    print("   ‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫!")
    print()
    
    print("3. ‚ö° –°–ö–û–†–û–°–¢–¨ –ì–ï–ù–ï–†–ê–¶–ò–ò:")
    print("   ‚Ä¢ Baseline: —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π (4.0—Å)")
    print("   ‚Ä¢ Value: —Å—Ä–µ–¥–Ω–∏–π (4.3—Å)")
    print("   ‚Ä¢ Aggressive: —Å–∞–º—ã–π –º–µ–¥–ª–µ–Ω–Ω—ã–π (4.9—Å)")
    print("   ‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å")
    print()

def print_qualitative_analysis():
    """–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑—Ü–æ–≤"""
    
    print(f"\nüé≠ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –û–ë–†–ê–ó–¶–û–í:")
    print("=" * 50)
    
    print("üìù –ê–ù–ê–õ–ò–ó –ü–û–≠–¢–ò–ß–ï–°–ö–û–ì–û –ü–†–û–ú–ü–¢–ê:")
    print("'Shall I compare thee to a summer's day?'")
    print("-" * 45)
    
    print("\nü•á AGGRESSIVE ALL:")
    print("   ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —à–µ–∫—Å–ø–∏—Ä–æ–≤—Å–∫–∏–π —Å—Ç–∏–ª—å")
    print("   ‚úÖ –ú–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (Juliet, Romeo, Richard III)")
    print("   ‚úÖ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞")
    print("   ‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–≤—Ç–æ—Ä—ã –∏ –æ–±—Ä—ã–≤—ã")
    print("   üìä –û—Ü–µ–Ω–∫–∞: 8/10")
    print()
    
    print("ü•à BASELINE:")
    print("   ‚úÖ –ß–µ—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏–∞–ª–æ–≥–æ–≤")
    print("   ‚úÖ –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (Juliet, Nurse, Lady Capulet)")
    print("   ‚úÖ –õ–æ–≥–∏—á–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã")
    print("   ‚úÖ –•–æ—Ä–æ—à–∞—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞")
    print("   üìä –û—Ü–µ–Ω–∫–∞: 8.5/10")
    print()
    
    print("ü•â VALUE CENTERED:")
    print("   ‚úÖ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏")
    print("   ‚úÖ –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞")
    print("   ‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä–∞—è –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å —Ñ—Ä–∞–∑")
    print("   ‚ö†Ô∏è  –ú–µ–Ω–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏")
    print("   üìä –û—Ü–µ–Ω–∫–∞: 7.5/10")
    print()

def create_final_recommendations():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    
    print(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("=" * 50)
    
    print("üèÜ –î–õ–Ø –ü–†–û–î–ê–ö–®–ï–ù–ê:")
    print("   ‚Ä¢ AGGRESSIVE ALL - –ª—É—á—à–∏–π –±–∞–ª–∞–Ω—Å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –º–µ—Ç—Ä–∏–∫")
    print("   ‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ –ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ –≤—Å–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º")
    print("   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
    print()
    
    print("‚ö° –î–õ–Ø –ë–´–°–¢–†–´–• –ó–ê–î–ê–ß:")
    print("   ‚Ä¢ BASELINE - –ª—É—á—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å/–∫–∞—á–µ—Å—Ç–≤–æ")
    print("   ‚Ä¢ –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
    print("   ‚Ä¢ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞")
    print()
    
    print("üí° –î–õ–Ø –ü–†–û–°–¢–û–¢–´:")
    print("   ‚Ä¢ VALUE CENTERED - –ø—Ä–æ—Å—Ç–æ—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏")
    print("   ‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    print("   ‚Ä¢ –•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤")
    print()
    
    print("üî¨ –ù–ê–£–ß–ù–´–ï –í–´–í–û–î–´:")
    print("   1. Validation loss –ù–ï –≤—Å–µ–≥–¥–∞ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å –∫–∞—á–µ—Å—Ç–≤–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    print("   2. Aggressive —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–µ—Ç –ª—É—á—à–∏–π –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    print("   3. Baseline –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
    print("   4. –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    print()

def create_visual_summary():
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É"""
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    models = ['Aggressive All', 'Baseline', 'Value Centered']
    val_losses = [4.8281, 4.9616, 4.9422]
    quality_scores = [0.650, 0.649, 0.638]
    generation_times = [4.9, 4.0, 4.3]
    uniqueness = [0.470, 0.468, 0.440]
    
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 10))
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: Validation Loss vs Quality Score
    colors = ['gold', 'silver', '#CD7F32']  # –ó–æ–ª–æ—Ç–æ, —Å–µ—Ä–µ–±—Ä–æ, –±—Ä–æ–Ω–∑–∞
    
    scatter = ax1.scatter(val_losses, quality_scores, c=colors, s=200, alpha=0.8, edgecolors='black')
    
    for i, model in enumerate(models):
        ax1.annotate(model, (val_losses[i], quality_scores[i]), 
                    xytext=(10, 10), textcoords='offset points', fontsize=10, fontweight='bold')
    
    ax1.set_xlabel('Validation Loss (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ)')
    ax1.set_ylabel('Quality Score (–±–æ–ª—å—à–µ = –ª—É—á—à–µ)')
    ax1.set_title('Validation Loss vs –ö–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
    ax1.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    bars2 = ax2.bar(models, generation_times, color=colors, alpha=0.8, edgecolor='black')
    ax2.set_ylabel('–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Å–µ–∫—É–Ω–¥—ã)')
    ax2.set_title('–°–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
    ax2.tick_params(axis='x', rotation=45)
    
    for bar, time in zip(bars2, generation_times):
        height = bar.get_height()
        ax2.text(bar.get_x() + bar.get_width()/2., height + 0.05,
                f'{time:.1f}—Å', ha='center', va='bottom', fontsize=10, fontweight='bold')
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
    bars3 = ax3.bar(models, uniqueness, color=colors, alpha=0.8, edgecolor='black')
    ax3.set_ylabel('–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å (–±–æ–ª—å—à–µ = –ª—É—á—à–µ)')
    ax3.set_title('–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞')
    ax3.tick_params(axis='x', rotation=45)
    
    for bar, uniq in zip(bars3, uniqueness):
        height = bar.get_height()
        ax3.text(bar.get_x() + bar.get_width()/2., height + 0.005,
                f'{uniq:.3f}', ha='center', va='bottom', fontsize=10, fontweight='bold')
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    overall_scores = []
    for i in range(len(models)):
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏ —Å—á–∏—Ç–∞–µ–º –æ–±—â–∏–π –±–∞–ª–ª
        norm_loss = 1 - (val_losses[i] - min(val_losses)) / (max(val_losses) - min(val_losses))
        norm_quality = (quality_scores[i] - min(quality_scores)) / (max(quality_scores) - min(quality_scores))
        norm_speed = 1 - (generation_times[i] - min(generation_times)) / (max(generation_times) - min(generation_times))
        norm_unique = (uniqueness[i] - min(uniqueness)) / (max(uniqueness) - min(uniqueness))
        
        overall = (norm_loss * 0.3 + norm_quality * 0.3 + norm_speed * 0.2 + norm_unique * 0.2)
        overall_scores.append(overall)
    
    bars4 = ax4.bar(models, overall_scores, color=colors, alpha=0.8, edgecolor='black')
    ax4.set_ylabel('–û–±—â–∏–π –±–∞–ª–ª')
    ax4.set_title('–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥')
    ax4.tick_params(axis='x', rotation=45)
    
    for bar, score in zip(bars4, overall_scores):
        height = bar.get_height()
        ax4.text(bar.get_x() + bar.get_width()/2., height + 0.01,
                f'{score:.3f}', ha='center', va='bottom', fontsize=10, fontweight='bold')
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    os.makedirs('training_plots', exist_ok=True)
    output_file = f'training_plots/final_generation_comparison_{timestamp}.png'
    plt.savefig(output_file, dpi=300, bbox_inches='tight')
    plt.show()
    
    print(f"üìä –ì—Ä–∞—Ñ–∏–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üé≠ –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ì–ï–ù–ï–†–ê–¶–ò–ò")
    print("=" * 80)
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    create_comprehensive_comparison()
    
    # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print_qualitative_analysis()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    create_final_recommendations()
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    create_visual_summary()
    
    print(f"\nüéâ –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print("üèÜ Aggressive All - –æ–±—â–∏–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å")
    print("‚ö° Baseline - –ª—É—á—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å/–∫–∞—á–µ—Å—Ç–≤–æ")
    print("üí° Value Centered - –ø—Ä–æ—Å—Ç–æ—Ç–∞ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å")

if __name__ == "__main__":
    main()
