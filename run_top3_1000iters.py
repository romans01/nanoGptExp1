#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø-3 –º–µ—Ç–æ–¥–æ–≤ –Ω–∞ 1000 –∏—Ç–µ—Ä–∞—Ü–∏–π
"""

import os
import json
import time
import subprocess
from datetime import datetime
from dataclasses import dataclass, asdict
from typing import Dict, List, Any

@dataclass
class ExperimentConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞"""
    name: str
    description: str
    max_iters: int = 1000
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
    center_qk: bool = False
    center_v: bool = False
    center_mlp: bool = False
    center_embeddings: bool = False
    center_residual: bool = False
    center_final_output: bool = False
    center_block_output: bool = False
    centering_mode: str = 'adaptive'

@dataclass
class BaseModelConfig:
    """–ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏"""
    n_layer: int = 12
    n_head: int = 12  
    n_embd: int = 768
    dropout: float = 0.1
    
    dataset: str = 'shakespeare'
    gradient_accumulation_steps: int = 4
    batch_size: int = 8
    block_size: int = 256
    
    learning_rate: float = 3e-4
    beta2: float = 0.99
    weight_decay: float = 1e-1
    
    device: str = 'cuda'
    dtype: str = 'bfloat16'
    compile: bool = True

def create_top3_experiments() -> List[ExperimentConfig]:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–æ–ø-3 —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º 500 –∏—Ç–µ—Ä–∞—Ü–∏–π"""
    
    return [
        ExperimentConfig(
            name="baseline_1000",
            description="ü•á –õ–£–ß–®–ò–ô: Baseline –±–µ–∑ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (1000 –∏—Ç–µ—Ä–∞—Ü–∏–π)"
        ),
        ExperimentConfig(
            name="value_centered_1000",
            description="ü•à 2-–µ –º–µ—Å—Ç–æ: Value —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ (1000 –∏—Ç–µ—Ä–∞—Ü–∏–π)",
            center_v=True
        ),
        ExperimentConfig(
            name="aggressive_all_1000", 
            description="ü•â 3-–µ –º–µ—Å—Ç–æ: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –≤—Å–µ –∫—Ä–æ–º–µ Residual (1000 –∏—Ç–µ—Ä–∞—Ü–∏–π)",
            center_qk=True,
            center_v=True,
            center_embeddings=True,
            center_mlp=True
        )
    ]

def generate_config_file(experiment: ExperimentConfig, base_config: BaseModelConfig) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è 1000 –∏—Ç–µ—Ä–∞—Ü–∏–π"""
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_dict = asdict(base_config)
    exp_dict = asdict(experiment)
    
    # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
    exp_dict.pop('name')
    exp_dict.pop('description')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    config_dict.update({k: v for k, v in exp_dict.items() if v is not None})
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è 1000 –∏—Ç–µ—Ä–∞—Ü–∏–π
    config_dict.update({
        'out_dir': f'out-final-{experiment.name}',
        'always_save_checkpoint': True,
        'eval_interval': 50,   # –ö–∞–∂–¥—ã–µ 50 –∏—Ç–µ—Ä–∞—Ü–∏–π
        'log_interval': 10,    # –ö–∞–∂–¥—ã–µ 10 –∏—Ç–µ—Ä–∞—Ü–∏–π
        'eval_iters': 50,      # 50 –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        'warmup_iters': 100,   # 10% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        'lr_decay_iters': experiment.max_iters,
        'min_lr': config_dict['learning_rate'] / 10,
        
        # –û—Ç–∫–ª—é—á–∞–µ–º wandb
        'wandb_log': False,
        'wandb_project': 'nanogpt-final',
        'wandb_run_name': experiment.name,
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        'beta1': 0.9,
        'grad_clip': 1.0,
    })
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_path = f'config/final_{experiment.name}.py'
    os.makedirs('config', exist_ok=True)
    
    with open(config_path, 'w') as f:
        f.write(f"# –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {experiment.description}\n")
        f.write(f"# –°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"# –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –Ω–∞ 1000 –∏—Ç–µ—Ä–∞—Ü–∏–π\n\n")
        
        for key, value in config_dict.items():
            if isinstance(value, str):
                f.write(f"{key} = '{value}'\n")
            else:
                f.write(f"{key} = {value}\n")
                
    return config_path

def run_experiment_with_detailed_logging(experiment: ExperimentConfig, base_config: BaseModelConfig) -> Dict[str, Any]:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    print(f"\nüèÜ –§–ò–ù–ê–õ–¨–ù–´–ô –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢: {experiment.name}")
    print("=" * 80)
    print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {experiment.description}")
    print(f"üìä –ò—Ç–µ—Ä–∞—Ü–∏–π: {experiment.max_iters}")
    print(f"üß† –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {base_config.n_layer} —Å–ª–æ–µ–≤, {base_config.n_head} –≥–æ–ª–æ–≤, {base_config.n_embd} —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_path = generate_config_file(experiment, base_config)
    print(f"üìÑ –ö–æ–Ω—Ñ–∏–≥: {config_path}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –æ–±—É—á–µ–Ω–∏—è
    has_advanced_centering = any([
        experiment.center_v, experiment.center_mlp, 
        experiment.center_residual, experiment.center_embeddings
    ])
    
    if has_advanced_centering:
        train_script = 'train_advanced_centered.py'
    elif any([experiment.center_qk, experiment.center_final_output, experiment.center_block_output]):
        train_script = 'train_centered.py'
    else:
        train_script = 'train.py'
        
    print(f"üîß –°–∫—Ä–∏–ø—Ç: {train_script}")
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–æ–≥ —Ñ–∞–π–ª
    log_file = f'training_log_final_{experiment.name}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
    start_time = time.time()
    
    try:
        cmd = [
            'python', train_script,
            config_path,
            f'--max_iters={experiment.max_iters}',
            '--wandb_log=False'
        ]
        
        print(f"üîÑ –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
        print(f"üìù –õ–æ–≥ —Ñ–∞–π–ª: {log_file}")
        print(f"‚è±Ô∏è  –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~{experiment.max_iters * 0.12 / 60:.1f} –º–∏–Ω—É—Ç")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—ã–≤–æ–¥–∞ –∏ –ø–æ–∫–∞–∑–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        with open(log_file, 'w') as f:
            process = subprocess.Popen(
                cmd, 
                stdout=subprocess.PIPE, 
                stderr=subprocess.STDOUT, 
                text=True, 
                bufsize=1,
                universal_newlines=True
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            last_progress_time = time.time()
            for line in process.stdout:
                f.write(line)
                f.flush()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                current_time = time.time()
                if current_time - last_progress_time > 30:
                    elapsed = current_time - start_time
                    print(f"   ‚è±Ô∏è  –ü—Ä–æ—à–ª–æ: {elapsed/60:.1f} –º–∏–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...")
                    last_progress_time = current_time
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                if 'step' in line and ('val_loss' in line or 'train_loss' in line):
                    print(f"   üìä {line.strip()}")
            
            process.wait()
            
        training_time = time.time() - start_time
        
        if process.returncode == 0:
            print(f"‚úÖ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {training_time:.1f}—Å ({training_time/60:.1f} –º–∏–Ω)")
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            experiment_result = parse_final_results(experiment, training_time, log_file)
            return experiment_result
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è")
            return {
                'name': experiment.name,
                'success': False,
                'error': 'Training failed',
                'time': training_time,
                'log_file': log_file
            }
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return {
            'name': experiment.name,
            'success': False,
            'error': str(e),
            'time': time.time() - start_time,
            'log_file': log_file
        }

def parse_final_results(experiment: ExperimentConfig, training_time: float, log_file: str) -> Dict[str, Any]:
    """–ü–∞—Ä—Å–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    
    result = {
        'name': experiment.name,
        'description': experiment.description,
        'success': True,
        'time': training_time,
        'config': asdict(experiment),
        'log_file': log_file
    }
    
    # –ü–∞—Ä—Å–∏–º –ª–æ–≥ —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è
    training_history = []
    
    try:
        with open(log_file, 'r') as f:
            for line in f:
                if 'step' in line and 'val_loss' in line and 'train_loss' in line:
                    try:
                        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —Ç–∏–ø–∞: "step 100: train loss 4.1234, val loss 4.5678"
                        parts = line.split()
                        step = None
                        train_loss = None
                        val_loss = None
                        
                        for i, part in enumerate(parts):
                            if part == 'step' and i + 1 < len(parts):
                                step_str = parts[i + 1].rstrip(':')
                                step = int(step_str)
                            elif part == 'loss' and i > 0 and parts[i-1] == 'train':
                                if i + 1 < len(parts):
                                    train_loss_str = parts[i + 1].rstrip(',')
                                    train_loss = float(train_loss_str)
                            elif part == 'loss' and i > 0 and parts[i-1] == 'val':
                                if i + 1 < len(parts):
                                    val_loss_str = parts[i + 1].rstrip(',')
                                    val_loss = float(val_loss_str)
                        
                        if step is not None and train_loss is not None and val_loss is not None:
                            training_history.append({
                                'step': step,
                                'train_loss': train_loss,
                                'val_loss': val_loss
                            })
                            
                    except (ValueError, IndexError):
                        continue
                        
        result['training_history'] = training_history
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if training_history:
            final_metrics = training_history[-1]
            result['final_train_loss'] = final_metrics['train_loss']
            result['final_val_loss'] = final_metrics['val_loss']
            result['final_step'] = final_metrics['step']
            
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ–≥–∞: {e}")
    
    # –ü–∞—Ä—Å–∏–º —á–µ–∫–ø–æ–∏–Ω—Ç
    out_dir = f'out-final-{experiment.name}'
    ckpt_path = os.path.join(out_dir, 'ckpt.pt')
    
    if os.path.exists(ckpt_path):
        try:
            import torch
            checkpoint = torch.load(ckpt_path, map_location='cpu', weights_only=False)
            
            if 'best_val_loss' in checkpoint:
                result['checkpoint_val_loss'] = float(checkpoint['best_val_loss'])
            if 'iter_num' in checkpoint:
                result['checkpoint_final_iter'] = int(checkpoint['iter_num'])
                
            print(f"üìä –ß–µ–∫–ø–æ–∏–Ω—Ç: val_loss={checkpoint.get('best_val_loss', 'N/A'):.4f}, iter={checkpoint.get('iter_num', 'N/A')}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–ø–æ–∏–Ω—Ç–∞: {e}")
    
    return result

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üèÜ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–û–ü-3 –ù–ê 1000 –ò–¢–ï–†–ê–¶–ò–ô")
    print("=" * 80)
    print("üéØ –¶–µ–ª—å: –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª—É—á—à–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏")
    print("üìä –ò—Ç–µ—Ä–∞—Ü–∏–π: 1000 –∫–∞–∂–¥—ã–π")
    print("üß† –ú–æ–¥–µ–ª—å: 12 —Å–ª–æ–µ–≤, 12 –≥–æ–ª–æ–≤, 768 —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
    print("üî¨ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–∏–ø–æ—Ç–µ–∑—É –æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ baseline")
    print("=" * 80)
    
    # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    base_config = BaseModelConfig()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã
    experiments = create_top3_experiments()
    
    print(f"üìã –§–∏–Ω–∞–ª—å–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã:")
    for i, exp in enumerate(experiments, 1):
        print(f"  {i}. {exp.name}")
        print(f"     üìù {exp.description}")
    
    estimated_time = len(experiments) * 1000 * 0.12  # ~0.12 —Å–µ–∫ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é
    print(f"‚è±Ô∏è  –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~{estimated_time/60:.0f} –º–∏–Ω—É—Ç")
    print("=" * 80)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã
    all_results = []
    start_time = time.time()
    
    for i, experiment in enumerate(experiments, 1):
        print(f"\nüöÄ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç {i}/{len(experiments)}")
        result = run_experiment_with_detailed_logging(experiment, base_config)
        all_results.append(result)
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º–∏
        if i < len(experiments):
            print(f"‚è∏Ô∏è  –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–º...")
            time.sleep(5)
        
    total_time = time.time() - start_time
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results_summary = {
        'timestamp': datetime.now().isoformat(),
        'experiment_type': 'final_top3_1000iters',
        'base_config': asdict(base_config),
        'total_experiments': len(experiments),
        'total_time': total_time,
        'results': all_results
    }
    
    results_file = f'final_top3_1000iters_results_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
    with open(results_file, 'w') as f:
        json.dump(results_summary, f, indent=2, default=str)
        
    print(f"\nüéâ –í–°–ï –§–ò–ù–ê–õ–¨–ù–´–ï –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}—Å ({total_time/60:.1f} –º–∏–Ω)")
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    analyze_final_results(all_results)
    
    return results_summary

def analyze_final_results(results: List[Dict[str, Any]]):
    """–§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    print(f"\nüèÜ –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í (1000 –ò–¢–ï–†–ê–¶–ò–ô)")
    print("=" * 70)
    
    successful = [r for r in results if r['success']]
    failed = [r for r in results if not r['success']]
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {len(successful)}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {len(failed)}")
    
    if successful:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ validation loss
        successful_with_loss = [r for r in successful if 'final_val_loss' in r]
        if successful_with_loss:
            successful_with_loss.sort(key=lambda x: x['final_val_loss'])
            
            print(f"\nüèÜ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ (1000 –∏—Ç–µ—Ä–∞—Ü–∏–π):")
            print("-" * 50)
            
            baseline_loss = None
            for r in successful_with_loss:
                if 'baseline' in r['name']:
                    baseline_loss = r['final_val_loss']
                    break
            
            for i, result in enumerate(successful_with_loss, 1):
                val_loss = result['final_val_loss']
                name = result['name']
                description = result['description']
                time_min = result['time'] / 60
                
                # –í—ã—á–∏—Å–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ baseline
                improvement = ""
                if baseline_loss and val_loss != baseline_loss:
                    pct_change = ((baseline_loss - val_loss) / baseline_loss) * 100
                    improvement = f" ({pct_change:+.2f}%)"
                
                medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
                print(f"{medal} {name}: {val_loss:.4f}{improvement}")
                print(f"    üìù {description}")
                print(f"    ‚è±Ô∏è  –í—Ä–µ–º—è: {time_min:.1f} –º–∏–Ω—É—Ç")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏
                if 'training_history' in result and result['training_history']:
                    history = result['training_history']
                    if len(history) >= 2:
                        start_loss = history[0]['val_loss']
                        final_loss = history[-1]['val_loss']
                        convergence = start_loss - final_loss
                        print(f"    üìà –ö–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü–∏—è: {start_loss:.4f} ‚Üí {final_loss:.4f} (—É–ª—É—á—à–µ–Ω–∏–µ {convergence:.4f})")
                print()
                
    if failed:
        print(f"\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–´:")
        for result in failed:
            print(f"  ‚Ä¢ {result['name']}: {result['error']}")
            
    print(f"\nüî¨ –í–´–í–û–î–´:")
    print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏–ª–∏ –≥–∏–ø–æ—Ç–µ–∑—É –æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏")
    print("‚Ä¢ –ü–æ–ª—É—á–∏–ª–∏ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –Ω–∞—É—á–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤")
    print("‚Ä¢ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")

if __name__ == "__main__":
    main()
