#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import torch
import torch.nn as nn
from model_advanced_centering import AdvancedGPT, AdvancedGPTConfig

def test_centering_modes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 50)
    
    # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    base_config = AdvancedGPTConfig(
        block_size=64,
        vocab_size=1000,
        n_layer=2,
        n_head=4,
        n_embd=128,
        dropout=0.0,
        bias=False
    )
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    batch_size = 2
    seq_len = 32
    x = torch.randint(0, base_config.vocab_size, (batch_size, seq_len))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    test_configs = [
        {
            'name': 'Baseline (–±–µ–∑ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è)',
            'params': {}
        },
        {
            'name': 'QK Centered (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π)',
            'params': {'center_qk': True}
        },
        {
            'name': 'Value Centered (–ù–û–í–û–ï)',
            'params': {'center_v': True}
        },
        {
            'name': 'MLP Centered (–ù–û–í–û–ï)',
            'params': {'center_mlp': True}
        },
        {
            'name': 'Embeddings Centered (–ù–û–í–û–ï)',
            'params': {'center_embeddings': True}
        },
        {
            'name': 'Residual Centered (–ù–û–í–û–ï)',
            'params': {'center_residual': True}
        },
        {
            'name': 'Full Advanced Centering',
            'params': {
                'center_qk': True,
                'center_v': True,
                'center_mlp': True,
                'center_embeddings': True,
                'center_residual': True,
                'center_final_output': True
            }
        }
    ]
    
    results = []
    
    for test_config in test_configs:
        print(f"\nüî¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {test_config['name']}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
        config = AdvancedGPTConfig(**{**base_config.__dict__, **test_config['params']})
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
            model = AdvancedGPT(config)
            model.eval()
            
            # –ü—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥
            with torch.no_grad():
                logits, loss = model(x)
                
                # –ü—Ä–æ—Ö–æ–¥ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
                logits_stats, loss_stats, centering_stats = model(x, return_centering_stats=True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
                assert torch.allclose(logits, logits_stats, atol=1e-6), "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å/–±–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å"
                
                print(f"  ‚úÖ –§–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–∞: {logits.shape}")
                print(f"  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è: {len(centering_stats)}")
                
                # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
                if centering_stats:
                    print("  üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:")
                    for stat_name, stats in centering_stats[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        print(f"    {stat_name}: norm_mean={stats['centered_norm_mean']:.4f}, center_norm={stats['center_norm']:.4f}")
                    if len(centering_stats) > 3:
                        print(f"    ... –∏ –µ—â–µ {len(centering_stats) - 3} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
                model_grad = AdvancedGPT(config)
                model_grad.train()
                logits_grad, _ = model_grad(x)
                loss_dummy = logits_grad.sum()
                loss_dummy.backward()
                
                grad_norms = []
                for name, param in model_grad.named_parameters():
                    if param.grad is not None:
                        grad_norms.append(param.grad.norm().item())
                
                avg_grad_norm = sum(grad_norms) / len(grad_norms) if grad_norms else 0.0
                print(f"  üéØ –°—Ä–µ–¥–Ω—è—è –Ω–æ—Ä–º–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤: {avg_grad_norm:.6f}")
                
                results.append({
                    'name': test_config['name'],
                    'output_shape': logits.shape,
                    'centering_stats_count': len(centering_stats),
                    'avg_grad_norm': avg_grad_norm,
                    'success': True
                })
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
            results.append({
                'name': test_config['name'],
                'success': False,
                'error': str(e)
            })
    
    # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("=" * 50)
    
    successful = [r for r in results if r['success']]
    failed = [r for r in results if not r['success']]
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(successful)}/{len(results)}")
    
    if successful:
        print("\nüèÜ –£—Å–ø–µ—à–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        for result in successful:
            print(f"  ‚Ä¢ {result['name']}: {result['centering_stats_count']} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫, grad_norm={result['avg_grad_norm']:.6f}")
    
    if failed:
        print(f"\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã: {len(failed)}")
        for result in failed:
            print(f"  ‚Ä¢ {result['name']}: {result['error']}")
    
    return results

def test_centering_modes_comparison():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"\nüî¨ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 50)
    
    config = AdvancedGPTConfig(
        block_size=32,
        vocab_size=500,
        n_layer=1,
        n_head=2,
        n_embd=64,
        center_qk=True,
        centering_mode='adaptive'  # –ë—É–¥–µ–º –º–µ–Ω—è—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
    )
    
    modes = ['simple', 'adaptive', 'learnable_center', 'momentum']
    x = torch.randint(0, config.vocab_size, (1, 16))
    
    for mode in modes:
        print(f"\nüéØ –†–µ–∂–∏–º: {mode}")
        config.centering_mode = mode
        
        try:
            model = AdvancedGPT(config)
            model.eval()
            
            with torch.no_grad():
                logits, loss, stats = model(x, return_centering_stats=True)
                
                print(f"  ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫: {len(stats)}")
                if stats:
                    first_stat = stats[0][1]
                    print(f"  üìä –ü–µ—Ä–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: center_norm={first_stat['center_norm']:.4f}")
                    
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ {mode}: {e}")

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    results = test_centering_modes()
    
    # –¢–µ—Å—Ç—ã —Ä–µ–∂–∏–º–æ–≤
    test_centering_modes_comparison()
    
    print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    successful_count = len([r for r in results if r['success']])
    if successful_count == len(results):
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º.")
    else:
        print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º–∏.")

if __name__ == "__main__":
    main()
