#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import torch
from model_advanced_centering import AdvancedGPT, AdvancedGPTConfig

def test_all_centering_modes():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 50)
    
    config = AdvancedGPTConfig(
        block_size=32,
        vocab_size=500,
        n_layer=2,
        n_head=4,
        n_embd=64,
        dropout=0.0,
        bias=False
    )
    
    x = torch.randint(0, config.vocab_size, (1, 16))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    test_configs = [
        ('Baseline', {}),
        ('QK Centered', {'center_qk': True}),
        ('Value Centered', {'center_v': True}),
        ('MLP Centered', {'center_mlp': True}),
        ('Embeddings Centered', {'center_embeddings': True}),
        ('Residual Centered', {'center_residual': True}),
        ('Full Centering', {
            'center_qk': True,
            'center_v': True,
            'center_mlp': True,
            'center_embeddings': True,
            'center_residual': True,
            'center_final_output': True
        })
    ]
    
    results = []
    
    for name, params in test_configs:
        print(f"\nüî¨ {name}:")
        
        test_config = AdvancedGPTConfig(**{**config.__dict__, **params})
        
        try:
            model = AdvancedGPT(test_config)
            model.eval()
            
            # –ü—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥
            with torch.no_grad():
                logits, loss, stats = model(x, return_centering_stats=True)
                
                print(f"  ‚úÖ –í—ã—Ö–æ–¥: {logits.shape}")
                print(f"  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫: {len(stats)}")
                
                if stats:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
                    for i, (stat_name, stat_data) in enumerate(stats[:2]):
                        print(f"    {stat_name}: norm={stat_data['centered_norm_mean']:.3f}")
                    if len(stats) > 2:
                        print(f"    ... –∏ –µ—â–µ {len(stats) - 2}")
                
                results.append((name, len(stats), True))
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
            results.append((name, 0, False))
    
    # –°–≤–æ–¥–∫–∞
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 30)
    
    successful = [r for r in results if r[2]]
    print(f"‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: {len(successful)}/{len(results)}")
    
    for name, stats_count, success in results:
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {name}: {stats_count} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫")
    
    return len(successful) == len(results)

def main():
    print("üöÄ –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    success = test_all_centering_modes()
    
    if success:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –ì–æ—Ç–æ–≤–æ –∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º!")
        print(f"\nüéØ –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
        print("‚Ä¢ center_v: –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ Value –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ attention")
        print("‚Ä¢ center_mlp: –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ GELU –≤ MLP")
        print("‚Ä¢ center_embeddings: –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
        print("‚Ä¢ center_residual: –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ residual connections")
        print("‚Ä¢ center_final_output: –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞")
        
        print(f"\nüìù –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print("config = AdvancedGPTConfig(")
        print("    center_qk=True,      # –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ QK —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("    center_v=True,       # –ù–û–í–û–ï: Value —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("    center_mlp=True,     # –ù–û–í–û–ï: MLP —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("    centering_mode='adaptive'")
        print(")")
    else:
        print(f"\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")

if __name__ == "__main__":
    main()
