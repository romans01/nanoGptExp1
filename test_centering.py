#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–æ–≤
"""

import torch
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from model_with_centering import GPTConfig, GPT, VectorCentering

def test_vector_centering():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å VectorCentering"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –º–æ–¥—É–ª—å VectorCentering...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –∫–ª–∞—Å—Ç–µ—Ä –≤–µ–∫—Ç–æ—Ä–æ–≤
    torch.manual_seed(42)
    batch_size, seq_len, embd_dim = 4, 10, 64
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä –≤–µ–∫—Ç–æ—Ä–æ–≤ (–≤—Å–µ –±–ª–∏–∑–∫–æ –∫ [1, 0, 0, ...])
    base_vector = torch.zeros(embd_dim)
    base_vector[0] = 1.0
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —à—É–º
    noise = 0.1 * torch.randn(batch_size, seq_len, embd_dim)
    x = base_vector.unsqueeze(0).unsqueeze(0) + noise
    
    # –ù–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞ –µ–¥–∏–Ω–∏—á–Ω—É—é —Å—Ñ–µ—Ä—É
    x = x / torch.norm(x, dim=-1, keepdim=True)
    
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã: {x.shape}")
    print(f"–°—Ä–µ–¥–Ω—è—è –Ω–æ—Ä–º–∞: {torch.norm(x, dim=-1).mean():.4f}")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —É–≥–ª—ã –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏
    x_flat = x.view(-1, embd_dim)
    cos_sim_matrix = torch.mm(x_flat, x_flat.t())
    angles_rad = torch.acos(torch.clamp(cos_sim_matrix, -1, 1))
    angles_deg = angles_rad * 180 / torch.pi
    
    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ (–∏—Å–∫–ª—é—á–∞–µ–º –¥–∏–∞–≥–æ–Ω–∞–ª—å)
    mask = torch.triu(torch.ones_like(angles_deg), diagonal=1).bool()
    original_angles = angles_deg[mask]
    
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–µ —É–≥–ª—ã: {original_angles.mean():.2f}¬∞ ¬± {original_angles.std():.2f}¬∞")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    config = GPTConfig(n_embd=embd_dim)
    
    modes = ['simple', 'adaptive', 'learnable_center', 'momentum']
    results = {}
    
    for mode in modes:
        print(f"\n--- –†–µ–∂–∏–º: {mode} ---")
        centering = VectorCentering(config, mode=mode)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        x_centered, stats = centering(x, return_stats=True)
        
        print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —É–≥–ª—ã
        x_centered_flat = x_centered.view(-1, embd_dim)
        cos_sim_matrix_new = torch.mm(x_centered_flat, x_centered_flat.t())
        angles_rad_new = torch.acos(torch.clamp(cos_sim_matrix_new, -1, 1))
        angles_deg_new = angles_rad_new * 180 / torch.pi
        
        new_angles = angles_deg_new[mask]
        
        print(f"–ù–æ–≤—ã–µ —É–≥–ª—ã: {new_angles.mean():.2f}¬∞ ¬± {new_angles.std():.2f}¬∞")
        print(f"–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —É–≥–ª–æ–≤: {new_angles.mean() / original_angles.mean():.2f}x")
        
        results[mode] = {
            'original_angles': original_angles.detach().numpy(),
            'new_angles': new_angles.detach().numpy(),
            'stats': stats
        }
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig, axes = plt.subplots(2, 2, figsize=(12, 10))
    axes = axes.flatten()
    
    for i, mode in enumerate(modes):
        ax = axes[i]
        
        original = results[mode]['original_angles']
        new = results[mode]['new_angles']
        
        ax.hist(original, bins=20, alpha=0.5, label='–ò—Å—Ö–æ–¥–Ω—ã–µ', color='blue')
        ax.hist(new, bins=20, alpha=0.5, label='–ü–æ—Å–ª–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è', color='red')
        
        ax.set_title(f'–†–µ–∂–∏–º: {mode}')
        ax.set_xlabel('–£–≥–æ–ª (–≥—Ä–∞–¥—É—Å—ã)')
        ax.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        orig_mean = np.mean(original)
        new_mean = np.mean(new)
        ax.text(0.05, 0.95, f'–ò—Å—Ö–æ–¥–Ω—ã–µ: {orig_mean:.1f}¬∞\n–ù–æ–≤—ã–µ: {new_mean:.1f}¬∞\n–£–≤–µ–ª–∏—á–µ–Ω–∏–µ: {new_mean/orig_mean:.1f}x', 
                transform=ax.transAxes, verticalalignment='top',
                bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8))
    
    plt.tight_layout()
    plt.savefig('centering_test_results.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    print(f"\nüìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ centering_test_results.png")
    
    return results

def test_model_with_centering():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É—é –º–æ–¥–µ–ª—å —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º...")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    config = GPTConfig(
        block_size=128,
        vocab_size=1000,
        n_layer=2,
        n_head=4,
        n_embd=128,
        dropout=0.0,
        use_centered_attention=True,
        center_qk=True,
        center_final_output=True,
        centering_mode='adaptive'
    )
    
    model = GPT(config)
    print(f"–ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: {model.get_num_params()/1e3:.1f}K –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    batch_size, seq_len = 2, 64
    x = torch.randint(0, config.vocab_size, (batch_size, seq_len))
    
    # Forward pass
    with torch.no_grad():
        logits, loss, centering_stats = model(x, x, return_centering_stats=True)
    
    print(f"–í—ã—Ö–æ–¥ –º–æ–¥–µ–ª–∏: {logits.shape}")
    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:")
    for name, stats in centering_stats:
        print(f"  {name}: {stats}")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª—å—é
    config_baseline = GPTConfig(
        block_size=128,
        vocab_size=1000,
        n_layer=2,
        n_head=4,
        n_embd=128,
        dropout=0.0,
        use_centered_attention=False,
        center_qk=False,
        center_final_output=False
    )
    
    model_baseline = GPT(config_baseline)
    
    with torch.no_grad():
        logits_baseline, _ = model_baseline(x, x)
    
    print(f"–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å: {logits_baseline.shape}")
    print(f"–†–∞–∑–Ω–∏—Ü–∞ –≤ –≤—ã—Ö–æ–¥–∞—Ö: {torch.mean((logits - logits_baseline)**2).item():.6f}")
    
    return model, model_baseline

def benchmark_centering():
    """–ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n‚ö° –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    import time
    
    config = GPTConfig(n_embd=768)
    centering = VectorCentering(config, mode='adaptive')
    
    # –†–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –±–∞—Ç—á–µ–π
    batch_sizes = [1, 4, 16, 64]
    seq_len = 512
    embd_dim = 768
    
    results = []
    
    for batch_size in batch_sizes:
        x = torch.randn(batch_size, seq_len, embd_dim)
        x = x / torch.norm(x, dim=-1, keepdim=True)
        
        # –ü—Ä–æ–≥—Ä–µ–≤
        for _ in range(10):
            _ = centering(x)
        
        # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        torch.cuda.synchronize() if torch.cuda.is_available() else None
        start_time = time.time()
        
        for _ in range(100):
            _ = centering(x)
        
        torch.cuda.synchronize() if torch.cuda.is_available() else None
        end_time = time.time()
        
        avg_time = (end_time - start_time) / 100 * 1000  # –º—Å
        tokens_per_sec = (batch_size * seq_len) / (avg_time / 1000)
        
        results.append({
            'batch_size': batch_size,
            'time_ms': avg_time,
            'tokens_per_sec': tokens_per_sec
        })
        
        print(f"Batch {batch_size}: {avg_time:.2f}ms, {tokens_per_sec:.0f} tokens/sec")
    
    return results

def main():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ nanoGPT")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ú–æ–¥—É–ª—å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    centering_results = test_vector_centering()
    
    # –¢–µ—Å—Ç 2: –ú–æ–¥–µ–ª—å —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    model, model_baseline = test_model_with_centering()
    
    # –¢–µ—Å—Ç 3: –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    benchmark_results = benchmark_centering()
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("  - centering_test_results.png - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("  - –ú–æ–¥–µ–ª—å —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("  - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–ª–µ–º–∞—è")

if __name__ == "__main__":
    main()
