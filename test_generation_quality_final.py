#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import os
import subprocess
import time
from datetime import datetime
from typing import List, Dict, Any

# –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º 1000 –∏—Ç–µ—Ä–∞—Ü–∏–π)
final_models = [
    {
        'name': 'aggressive_all_1000',
        'description': 'ü•á –ü–û–ë–ï–î–ò–¢–ï–õ–¨: Aggressive All (QK+V+Emb+MLP)',
        'out_dir': 'out-final-aggressive_all_1000',
        'val_loss': 4.8281,
        'script': 'sample_centered.py'
    },
    {
        'name': 'value_centered_1000', 
        'description': 'ü•à 2-–µ –º–µ—Å—Ç–æ: Value —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ',
        'out_dir': 'out-final-value_centered_1000',
        'val_loss': 4.9422,
        'script': 'sample_centered.py'
    },
    {
        'name': 'baseline_1000',
        'description': 'ü•â 3-–µ –º–µ—Å—Ç–æ: Baseline (–±–µ–∑ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è)',
        'out_dir': 'out-final-baseline_1000', 
        'val_loss': 4.9616,
        'script': 'sample.py'
    }
]

# –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤
test_prompts = [
    {
        'name': 'shakespeare_dialogue',
        'prompt': 'JULIET:\nO Romeo, Romeo! wherefore art thou Romeo?',
        'description': '–®–µ–∫—Å–ø–∏—Ä–æ–≤—Å–∫–∏–π –¥–∏–∞–ª–æ–≥'
    },
    {
        'name': 'dramatic_monologue',
        'prompt': 'HAMLET:\nTo be, or not to be, that is the question:',
        'description': '–î—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–æ–ª–æ–≥'
    },
    {
        'name': 'character_introduction',
        'prompt': 'Enter KING RICHARD II, with his nobles.',
        'description': '–í–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'
    },
    {
        'name': 'poetic_verse',
        'prompt': 'Shall I compare thee to a summer\'s day?',
        'description': '–ü–æ—ç—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏'
    },
    {
        'name': 'simple_start',
        'prompt': 'The king said',
        'description': '–ü—Ä–æ—Å—Ç–æ–µ –Ω–∞—á–∞–ª–æ'
    }
]

def generate_text(model_info: Dict[str, Any], prompt: str, num_tokens: int = 500) -> Dict[str, Any]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –º–æ–¥–µ–ª–∏"""
    
    print(f"üé≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è {model_info['name']}...")
    print(f"   üìù –ü—Ä–æ–º–ø—Ç: \"{prompt[:50]}...\"")
    
    try:
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        cmd = [
            'python', model_info['script'],
            f'--out_dir={model_info["out_dir"]}',
            f'--start={prompt}',
            '--num_samples=1',
            f'--max_new_tokens={num_tokens}',
            '--temperature=0.8',
            '--top_k=200',
            '--seed=42'  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
        ]
        
        start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=60  # 1 –º–∏–Ω—É—Ç–∞ —Ç–∞–π–º–∞—É—Ç
        )
        
        generation_time = time.time() - start_time
        
        if result.returncode == 0:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            output_lines = result.stdout.split('\n')
            
            # –ò—â–µ–º –Ω–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏)
            generation_start = -1
            for i, line in enumerate(output_lines):
                if prompt in line:
                    generation_start = i
                    break
            
            if generation_start >= 0:
                # –°–æ–±–∏—Ä–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                generated_lines = []
                for line in output_lines[generation_start:]:
                    if line.strip() == '---------------':
                        break
                    generated_lines.append(line)
                
                generated_text = '\n'.join(generated_lines).strip()
                
                return {
                    'success': True,
                    'generated_text': generated_text,
                    'generation_time': generation_time,
                    'model_info': model_info,
                    'prompt': prompt
                }
            else:
                return {
                    'success': False,
                    'error': 'Could not find generated text in output',
                    'raw_output': result.stdout[:500],
                    'model_info': model_info,
                    'prompt': prompt
                }
        else:
            return {
                'success': False,
                'error': f'Generation failed: {result.stderr[:200]}',
                'model_info': model_info,
                'prompt': prompt
            }
            
    except subprocess.TimeoutExpired:
        return {
            'success': False,
            'error': 'Generation timeout (60s)',
            'model_info': model_info,
            'prompt': prompt
        }
    except Exception as e:
        return {
            'success': False,
            'error': f'Exception: {str(e)}',
            'model_info': model_info,
            'prompt': prompt
        }

def analyze_text_quality(text: str) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    
    lines = text.split('\n')
    words = text.split()
    
    # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    metrics = {
        'total_chars': len(text),
        'total_words': len(words),
        'total_lines': len(lines),
        'avg_words_per_line': len(words) / max(len(lines), 1),
        'avg_chars_per_word': len(text.replace(' ', '')) / max(len(words), 1)
    }
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –®–µ–∫—Å–ø–∏—Ä–∞
    shakespeare_features = {
        'has_character_names': sum(1 for line in lines if ':' in line and line.isupper()),
        'has_stage_directions': sum(1 for line in lines if line.strip().startswith('[')),
        'has_dialogue_structure': sum(1 for line in lines if ':' in line),
        'blank_lines': sum(1 for line in lines if not line.strip()),
    }
    
    # –û—Ü–µ–Ω–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏
    word_counts = {}
    for word in words:
        word_lower = word.lower().strip('.,!?;:')
        word_counts[word_lower] = word_counts.get(word_lower, 0) + 1
    
    if words:
        unique_words = len(word_counts)
        repetition_score = unique_words / len(words)  # –ß–µ–º –≤—ã—à–µ, —Ç–µ–º –º–µ–Ω—å—à–µ –ø–æ–≤—Ç–æ—Ä–æ–≤
    else:
        repetition_score = 0
    
    # –û—Ü–µ–Ω–∫–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ (–ø—Ä–æ—Å—Ç–∞—è)
    coherence_indicators = [
        'and', 'but', 'then', 'so', 'because', 'therefore', 'however', 'thus',
        'when', 'where', 'while', 'since', 'although', 'though'
    ]
    
    coherence_words = sum(1 for word in words if word.lower().strip('.,!?;:') in coherence_indicators)
    coherence_score = coherence_words / max(len(words), 1)
    
    return {
        'basic_metrics': metrics,
        'shakespeare_features': shakespeare_features,
        'repetition_score': repetition_score,
        'coherence_score': coherence_score,
        'unique_words': unique_words if 'unique_words' in locals() else 0
    }

def run_comprehensive_generation_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    
    print("üé≠ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–ß–ï–°–¢–í–ê –ì–ï–ù–ï–†–ê–¶–ò–ò")
    print("=" * 80)
    print("üéØ –¶–µ–ª—å: –°—Ä–∞–≤–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
    print("üìä –ú–æ–¥–µ–ª–∏: 3 —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏")
    print("üìù –ü—Ä–æ–º–ø—Ç—ã: 5 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤")
    print("üî§ –¢–æ–∫–µ–Ω—ã: 500 –Ω–∞ –∫–∞–∂–¥—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
    print("=" * 80)
    
    all_results = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–µ–π
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –ú–û–î–ï–õ–ï–ô:")
    for model in final_models:
        ckpt_path = os.path.join(model['out_dir'], 'ckpt.pt')
        if os.path.exists(ckpt_path):
            print(f"   ‚úÖ {model['name']}: –º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print(f"   ‚ùå {model['name']}: –º–æ–¥–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ {ckpt_path}")
    
    print(f"\nüöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ì–ï–ù–ï–†–ê–¶–ò–Æ...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –º–æ–¥–µ–ª—å-–ø—Ä–æ–º–ø—Ç
    total_tests = len(final_models) * len(test_prompts)
    current_test = 0
    
    for model in final_models:
        print(f"\nüì± –ú–û–î–ï–õ–¨: {model['description']}")
        print(f"   üìä Validation Loss: {model['val_loss']}")
        print("-" * 60)
        
        model_results = []
        
        for prompt_info in test_prompts:
            current_test += 1
            print(f"\n   üé≠ –¢–µ—Å—Ç {current_test}/{total_tests}: {prompt_info['description']}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            result = generate_text(model, prompt_info['prompt'], 500)
            
            if result['success']:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                quality_analysis = analyze_text_quality(result['generated_text'])
                result['quality_analysis'] = quality_analysis
                
                print(f"      ‚úÖ –£—Å–ø–µ—à–Ω–æ ({result['generation_time']:.1f}—Å)")
                print(f"      üìä –°–ª–æ–≤: {quality_analysis['basic_metrics']['total_words']}")
                print(f"      üîÑ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: {quality_analysis['repetition_score']:.3f}")
                
            else:
                print(f"      ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            
            result['prompt_info'] = prompt_info
            model_results.append(result)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏
            time.sleep(1)
        
        all_results.extend(model_results)
    
    return all_results

def create_generation_report(results: List[Dict[str, Any]]):
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ì–ï–ù–ï–†–ê–¶–ò–ò")
    print("=" * 60)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–æ–¥–µ–ª—è–º
    model_results = {}
    for result in results:
        model_name = result['model_info']['name']
        if model_name not in model_results:
            model_results[model_name] = []
        model_results[model_name].append(result)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å
    model_scores = {}
    
    for model_name, model_tests in model_results.items():
        print(f"\nüé≠ {model_name.upper()}:")
        print("-" * 40)
        
        successful_tests = [r for r in model_tests if r['success']]
        failed_tests = [r for r in model_tests if not r['success']]
        
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {len(successful_tests)}/{len(model_tests)}")
        
        if failed_tests:
            print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {len(failed_tests)}")
            for failed in failed_tests:
                print(f"      ‚Ä¢ {failed['prompt_info']['description']}: {failed['error']}")
        
        if successful_tests:
            # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            avg_words = sum(r['quality_analysis']['basic_metrics']['total_words'] for r in successful_tests) / len(successful_tests)
            avg_repetition = sum(r['quality_analysis']['repetition_score'] for r in successful_tests) / len(successful_tests)
            avg_coherence = sum(r['quality_analysis']['coherence_score'] for r in successful_tests) / len(successful_tests)
            avg_time = sum(r['generation_time'] for r in successful_tests) / len(successful_tests)
            
            # –®–µ–∫—Å–ø–∏—Ä–æ–≤—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
            avg_character_names = sum(r['quality_analysis']['shakespeare_features']['has_character_names'] for r in successful_tests) / len(successful_tests)
            avg_dialogue = sum(r['quality_analysis']['shakespeare_features']['has_dialogue_structure'] for r in successful_tests) / len(successful_tests)
            
            print(f"   üìä –°—Ä–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏:")
            print(f"      üî§ –°–ª–æ–≤: {avg_words:.1f}")
            print(f"      üîÑ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: {avg_repetition:.3f}")
            print(f"      üîó –°–≤—è–∑–Ω–æ—Å—Ç—å: {avg_coherence:.3f}")
            print(f"      ‚è±Ô∏è  –í—Ä–µ–º—è: {avg_time:.1f}—Å")
            print(f"      üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏: {avg_character_names:.1f}")
            print(f"      üí¨ –î–∏–∞–ª–æ–≥–∏: {avg_dialogue:.1f}")
            
            # –û–±—â–∏–π –±–∞–ª–ª (–ø—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞)
            quality_score = (
                avg_repetition * 0.3 +  # –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–∞
                avg_coherence * 0.2 +   # –°–≤—è–∑–Ω–æ—Å—Ç—å
                min(avg_words / 100, 1.0) * 0.2 +  # –î–ª–∏–Ω–∞ (–¥–æ 100 —Å–ª–æ–≤ = —Ö–æ—Ä–æ—à–æ)
                (avg_character_names > 0) * 0.15 +  # –ï—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
                (avg_dialogue > 0) * 0.15           # –ï—Å—Ç—å –¥–∏–∞–ª–æ–≥–∏
            )
            
            model_scores[model_name] = {
                'quality_score': quality_score,
                'avg_words': avg_words,
                'avg_repetition': avg_repetition,
                'avg_coherence': avg_coherence,
                'avg_time': avg_time,
                'success_rate': len(successful_tests) / len(model_tests)
            }
            
            print(f"      üèÜ –û–±—â–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞: {quality_score:.3f}")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
    print(f"\nüèÜ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ô–¢–ò–ù–ì –ü–û –ö–ê–ß–ï–°–¢–í–£ –ì–ï–ù–ï–†–ê–¶–ò–ò:")
    print("=" * 50)
    
    sorted_models = sorted(model_scores.items(), key=lambda x: x[1]['quality_score'], reverse=True)
    
    for i, (model_name, scores) in enumerate(sorted_models, 1):
        model_info = next(m for m in final_models if m['name'] == model_name)
        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â"
        
        print(f"{medal} {model_name}:")
        print(f"   üìù {model_info['description']}")
        print(f"   üèÜ –ö–∞—á–µ—Å—Ç–≤–æ: {scores['quality_score']:.3f}")
        print(f"   üìä Val Loss: {model_info['val_loss']}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {scores['success_rate']*100:.0f}%")
        print()
    
    return model_scores

def save_generation_samples(results: List[Dict[str, Any]]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞–∑—Ü—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ–±—Ä–∞–∑—Ü–æ–≤
    samples_dir = f'generation_samples_{timestamp}'
    os.makedirs(samples_dir, exist_ok=True)
    
    print(f"\nüíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –û–ë–†–ê–ó–¶–û–í –ì–ï–ù–ï–†–ê–¶–ò–ò:")
    print(f"üìÅ –ü–∞–ø–∫–∞: {samples_dir}")
    
    for result in results:
        if result['success']:
            model_name = result['model_info']['name']
            prompt_name = result['prompt_info']['name']
            
            filename = f"{model_name}_{prompt_name}.txt"
            filepath = os.path.join(samples_dir, filename)
            
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(f"–ú–û–î–ï–õ–¨: {result['model_info']['description']}\n")
                f.write(f"VALIDATION LOSS: {result['model_info']['val_loss']}\n")
                f.write(f"–ü–†–û–ú–ü–¢: {result['prompt_info']['description']}\n")
                f.write(f"–í–†–ï–ú–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò: {result['generation_time']:.1f}—Å\n")
                f.write("=" * 60 + "\n\n")
                f.write(result['generated_text'])
                f.write("\n\n" + "=" * 60 + "\n")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                qa = result['quality_analysis']
                f.write("–ú–ï–¢–†–ò–ö–ò –ö–ê–ß–ï–°–¢–í–ê:\n")
                f.write(f"‚Ä¢ –°–ª–æ–≤: {qa['basic_metrics']['total_words']}\n")
                f.write(f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: {qa['repetition_score']:.3f}\n")
                f.write(f"‚Ä¢ –°–≤—è–∑–Ω–æ—Å—Ç—å: {qa['coherence_score']:.3f}\n")
                f.write(f"‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏: {qa['shakespeare_features']['has_character_names']}\n")
                f.write(f"‚Ä¢ –î–∏–∞–ª–æ–≥–∏: {qa['shakespeare_features']['has_dialogue_structure']}\n")
            
            print(f"   üíæ {filename}")
    
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {len([r for r in results if r['success']])}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üé≠ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–ß–ï–°–¢–í–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –§–ò–ù–ê–õ–¨–ù–´–• –ú–û–î–ï–õ–ï–ô")
    print("=" * 80)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    results = run_comprehensive_generation_test()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    model_scores = create_generation_report(results)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–∑—Ü—ã
    save_generation_samples(results)
    
    print(f"\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏")
    print("üíæ –í—Å–µ –æ–±—Ä–∞–∑—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    
    return results, model_scores

if __name__ == "__main__":
    main()
