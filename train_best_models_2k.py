#!/usr/bin/env python3
"""
–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å 2 –ª—É—á—à–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏ –Ω–∞ 2000 –∏—Ç–µ—Ä–∞—Ü–∏–π
–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º baseline vs qk_centered –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
"""

import os
import sys
import time
import subprocess
from pathlib import Path

# –¢–æ–ª—å–∫–æ 2 –ª—É—á—à–∏—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
EXPERIMENTS = [
    {
        'name': 'baseline_bpe_2k',
        'description': '–ë–∞–∑–æ–≤–∞—è BPE –º–æ–¥–µ–ª—å –±–µ–∑ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (2000 –∏—Ç–µ—Ä–∞—Ü–∏–π)',
        'config': {
            'use_centered_attention': False,
            'center_qk': False,
            'center_block_output': False,
            'center_final_output': False,
        }
    },
    {
        'name': 'qk_centered_bpe_2k',
        'description': 'BPE –º–æ–¥–µ–ª—å —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º query/key (2000 –∏—Ç–µ—Ä–∞—Ü–∏–π)',
        'config': {
            'use_centered_attention': True,
            'center_qk': True,
            'center_block_output': False,
            'center_final_output': False,
            'centering_mode': 'adaptive'
        }
    }
]

def create_config_file(experiment, base_config_path='config/train_shakespeare_bpe.py'):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –Ω–∞ 2000 –∏—Ç–µ—Ä–∞—Ü–∏–π"""
    
    config_lines = []
    config_lines.append(f"# –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç 2K –∏—Ç–µ—Ä–∞—Ü–∏–π: {experiment['name']}")
    config_lines.append(f"# {experiment['description']}")
    config_lines.append("# –ë–∞–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ train_shakespeare_bpe.py")
    config_lines.append("")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    config_lines.append("# –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    config_lines.append(f"out_dir = 'out-{experiment['name']}'")
    config_lines.append("eval_interval = 100  # —á–∞—â–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è 2000 –∏—Ç–µ—Ä–∞—Ü–∏–π")
    config_lines.append("eval_iters = 50") 
    config_lines.append("log_interval = 10")
    config_lines.append("always_save_checkpoint = True  # –°–æ—Ö—Ä–∞–Ω—è–µ–º checkpoint –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    config_lines.append("")
    config_lines.append("wandb_log = False")
    config_lines.append(f"wandb_project = 'centering-2k-experiments'")
    config_lines.append(f"wandb_run_name = '{experiment['name']}'")
    config_lines.append("")
    config_lines.append("# –ò—Å–ø–æ–ª—å–∑—É–µ–º BPE —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—é (–∫–∞–∫ GPT-2), –Ω–æ –æ–±—É—á–∞–µ–º —Å –Ω—É–ª—è")
    config_lines.append("dataset = 'shakespeare'")
    config_lines.append("init_from = 'scratch'  # —Å –Ω—É–ª—è, –∞ –Ω–µ –æ—Ç GPT-2")
    config_lines.append("")
    config_lines.append("# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏")
    config_lines.append("gradient_accumulation_steps = 4")
    config_lines.append("batch_size = 8")
    config_lines.append("block_size = 512  # –∫–æ–Ω—Ç–µ–∫—Å—Ç 512 —Ç–æ–∫–µ–Ω–æ–≤")
    config_lines.append("")
    config_lines.append("# –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ - –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º BPE –∫–æ–Ω—Ñ–∏–≥–µ")
    config_lines.append("n_layer = 24")
    config_lines.append("n_head = 12")
    config_lines.append("n_embd = 768")
    config_lines.append("dropout = 0.1")
    config_lines.append("")
    config_lines.append("# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è - 2000 –∏—Ç–µ—Ä–∞—Ü–∏–π")
    config_lines.append("learning_rate = 3e-4")
    config_lines.append("max_iters = 2000  # –î–ª–∏–Ω–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã")
    config_lines.append("lr_decay_iters = 2000")
    config_lines.append("min_lr = 3e-5")
    config_lines.append("beta2 = 0.95")
    config_lines.append("warmup_iters = 200  # –±–æ–ª—å—à–µ –¥–ª—è 2000 –∏—Ç–µ—Ä–∞—Ü–∏–π")
    config_lines.append("")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    config_lines.append("# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")
    for key, value in experiment['config'].items():
        if isinstance(value, str):
            config_lines.append(f"{key} = '{value}'")
        else:
            config_lines.append(f"{key} = {value}")
    
    config_content = '\n'.join(config_lines)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
    config_path = f"config/{experiment['name']}.py"
    with open(config_path, 'w') as f:
        f.write(config_content)
    
    return config_path

def run_experiment(experiment, max_iters=2000):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç"""
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞—é —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: {experiment['name']}")
    print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {experiment['description']}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    config_path = create_config_file(experiment)
    print(f"üìÑ –ö–æ–Ω—Ñ–∏–≥: {config_path}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
    cmd = [
        'python', 'train_with_logging.py',
        config_path,
        f'--max_iters={max_iters}'
    ]
    
    print(f"üîÑ –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    
    start_time = time.time()
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=10800)  # 3 —á–∞—Å–∞ —Ç–∞–π–º–∞—É—Ç
        
        if result.returncode == 0:
            duration = time.time() - start_time
            print(f"‚úÖ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç {experiment['name']} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.1f}—Å ({duration/60:.1f} –º–∏–Ω)")
            return True, duration
        else:
            print(f"‚ùå –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç {experiment['name']} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:")
            print(result.stderr)
            return False, 0
            
    except subprocess.TimeoutExpired:
        print(f"‚è∞ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç {experiment['name']} –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç (3 —á–∞—Å–∞)")
        return False, 0
    except KeyboardInterrupt:
        print(f"üõë –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç {experiment['name']} –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False, 0

def analyze_results():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã 2K —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
    print("\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ 2K —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤:")
    
    results = []
    
    for experiment in EXPERIMENTS:
        out_dir = f"out-{experiment['name']}"
        
        if os.path.exists(out_dir):
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π checkpoint
            checkpoints = list(Path(out_dir).glob("*.pt"))
            if checkpoints:
                print(f"‚úÖ {experiment['name']}: –ù–∞–π–¥–µ–Ω checkpoint")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å loss –∏–∑ checkpoint
                try:
                    import torch
                    checkpoint_path = checkpoints[0]
                    checkpoint = torch.load(checkpoint_path, map_location='cpu')
                    final_loss = checkpoint.get('best_val_loss', None)
                    
                    if final_loss:
                        results.append({
                            'name': experiment['name'],
                            'description': experiment['description'],
                            'final_loss': final_loss
                        })
                except Exception as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è checkpoint –¥–ª—è {experiment['name']}: {e}")
            else:
                print(f"‚ùå {experiment['name']}: Checkpoint –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"‚ùå {experiment['name']}: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ loss
    if results:
        results.sort(key=lambda x: x['final_loss'])
        
        print(f"\nüèÜ –†–µ–π—Ç–∏–Ω–≥ 2K —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –ø–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É validation loss:")
        for i, result in enumerate(results, 1):
            print(f"{i}. {result['name']}: {result['final_loss']:.4f} - {result['description']}")
            
        # –í—ã—á–∏—Å–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
        if len(results) == 2:
            baseline_loss = None
            qk_loss = None
            
            for result in results:
                if 'baseline' in result['name']:
                    baseline_loss = result['final_loss']
                elif 'qk_centered' in result['name']:
                    qk_loss = result['final_loss']
            
            if baseline_loss and qk_loss:
                improvement = ((baseline_loss - qk_loss) / baseline_loss) * 100
                print(f"\nüìà QK Centered —É–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ Baseline:")
                print(f"   Baseline: {baseline_loss:.4f}")
                print(f"   QK Centered: {qk_loss:.4f}")
                print(f"   –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:+.2f}%")
    
    return results

def compare_generation():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 2K –º–æ–¥–µ–ª–µ–π"""
    print("\nüé≠ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 2K –º–æ–¥–µ–ª–µ–π:")
    
    prompts = ["ROMEO:", "JULIET:", "To be or not to be"]
    
    for prompt in prompts:
        print(f"\n{'='*60}")
        print(f"üéØ –ü—Ä–æ–º–ø—Ç: '{prompt}'")
        print(f"{'='*60}")
        
        for experiment in EXPERIMENTS:
            out_dir = f"out-{experiment['name']}"
            
            if os.path.exists(f"{out_dir}/ckpt.pt"):
                print(f"\nüé≠ {experiment['name'].upper()}:")
                print("-" * 40)
                
                cmd = [
                    'python', 'sample_centered.py',
                    f'--out_dir={out_dir}',
                    '--num_samples=1',
                    '--max_new_tokens=100',
                    f'--start={prompt}',
                    '--temperature=0.8'
                ]
                
                try:
                    result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)
                    
                    if result.returncode == 0:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                        output_lines = result.stdout.split('\n')
                        
                        start_found = False
                        for line in output_lines:
                            if prompt in line and not start_found:
                                start_found = True
                                print(line)
                            elif start_found and '---------------' in line:
                                break
                            elif start_found:
                                print(line)
                    else:
                        print("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                        
                except:
                    print("–¢–∞–π–º–∞—É—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

def main():
    print("üß™ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å 2 –ª—É—á—à–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏ - 2000 –∏—Ç–µ—Ä–∞—Ü–∏–π")
    print("=" * 70)
    print("üéØ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º: Baseline vs QK Centered")
    print("üìä –ò—Ç–µ—Ä–∞—Ü–∏–π: 2000 –∫–∞–∂–¥—ã–π")
    print("‚è±Ô∏è  –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~1 —á–∞—Å")
    
    if len(sys.argv) > 1:
        if sys.argv[1] == 'analyze':
            analyze_results()
            return
        elif sys.argv[1] == 'compare':
            compare_generation()
            return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ Shakespeare BPE
    if not os.path.exists('data/shakespeare/train.bin'):
        print("üì• –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ Shakespeare BPE...")
        subprocess.run(['python', 'data/shakespeare/prepare.py'])
    
    successful_experiments = 0
    total_time = 0
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã
    for i, experiment in enumerate(EXPERIMENTS, 1):
        print(f"\n{'='*70}")
        print(f"–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç {i}/{len(EXPERIMENTS)}")
        
        success, duration = run_experiment(experiment, 2000)
        if success:
            successful_experiments += 1
            total_time += duration
    
    print(f"\n{'='*70}")
    print(f"üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: {successful_experiments}/{len(EXPERIMENTS)}")
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}—Å ({total_time/60:.1f} –º–∏–Ω)")
    
    if successful_experiments > 0:
        print(f"\nüìä –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print(f"python {sys.argv[0]} analyze")
        print(f"\nüé≠ –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print(f"python {sys.argv[0]} compare")

if __name__ == "__main__":
    main()
