#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ nanoGPT
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
"""

import os
import sys
import time
import subprocess
from pathlib import Path

# –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
EXPERIMENTS = [
    {
        'name': 'baseline',
        'description': '–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –±–µ–∑ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è',
        'config': {
            'use_centered_attention': False,
            'center_qk': False,
            'center_block_output': False,
            'center_final_output': False,
        }
    },
    {
        'name': 'qk_centered',
        'description': '–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ query/key –≤ attention',
        'config': {
            'use_centered_attention': True,
            'center_qk': True,
            'center_block_output': False,
            'center_final_output': False,
            'centering_mode': 'adaptive'
        }
    },
    {
        'name': 'final_centered',
        'description': '–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤',
        'config': {
            'use_centered_attention': False,
            'center_qk': False,
            'center_block_output': False,
            'center_final_output': True,
            'centering_mode': 'adaptive'
        }
    },
    {
        'name': 'full_centered',
        'description': '–ü–æ–ª–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ (QK + —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏)',
        'config': {
            'use_centered_attention': True,
            'center_qk': True,
            'center_block_output': False,
            'center_final_output': True,
            'centering_mode': 'adaptive'
        }
    },
    {
        'name': 'momentum_centered',
        'description': '–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å momentum',
        'config': {
            'use_centered_attention': True,
            'center_qk': True,
            'center_block_output': False,
            'center_final_output': True,
            'centering_mode': 'momentum'
        }
    }
]

def create_config_file(experiment, base_config_path='config/train_shakespeare_char.py'):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞"""
    
    # –ß–∏—Ç–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥
    with open(base_config_path, 'r') as f:
        base_config = f.read()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥
    config_lines = []
    config_lines.append(f"# –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: {experiment['name']}")
    config_lines.append(f"# {experiment['description']}")
    config_lines.append("")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    config_lines.append("# –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    config_lines.append(f"out_dir = 'out-centering-{experiment['name']}'")
    config_lines.append("eval_interval = 250")
    config_lines.append("eval_iters = 200") 
    config_lines.append("log_interval = 10")
    config_lines.append("always_save_checkpoint = False")
    config_lines.append("")
    config_lines.append("wandb_log = False")
    config_lines.append(f"wandb_project = 'centering-experiments'")
    config_lines.append(f"wandb_run_name = '{experiment['name']}'")
    config_lines.append("")
    config_lines.append("dataset = 'shakespeare_char'")
    config_lines.append("gradient_accumulation_steps = 1")
    config_lines.append("batch_size = 64")
    config_lines.append("block_size = 256")
    config_lines.append("")
    config_lines.append("# –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏")
    config_lines.append("n_layer = 6")
    config_lines.append("n_head = 6")
    config_lines.append("n_embd = 384")
    config_lines.append("dropout = 0.2")
    config_lines.append("")
    config_lines.append("# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è")
    config_lines.append("learning_rate = 1e-3")
    config_lines.append("max_iters = 1000  # –ö–æ—Ä–æ—Ç–∫–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã")
    config_lines.append("lr_decay_iters = 1000")
    config_lines.append("min_lr = 1e-4")
    config_lines.append("beta2 = 0.99")
    config_lines.append("warmup_iters = 100")
    config_lines.append("")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    config_lines.append("# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")
    for key, value in experiment['config'].items():
        if isinstance(value, str):
            config_lines.append(f"{key} = '{value}'")
        else:
            config_lines.append(f"{key} = {value}")
    
    config_content = '\n'.join(config_lines)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
    config_path = f"config/centering_{experiment['name']}.py"
    with open(config_path, 'w') as f:
        f.write(config_content)
    
    return config_path

def run_experiment(experiment, max_iters=1000):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç"""
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞—é —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: {experiment['name']}")
    print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {experiment['description']}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    config_path = create_config_file(experiment)
    print(f"üìÑ –ö–æ–Ω—Ñ–∏–≥: {config_path}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
    cmd = [
        'python', 'train_with_logging.py',
        config_path,
        f'--max_iters={max_iters}'
    ]
    
    print(f"üîÑ –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    
    start_time = time.time()
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=3600)  # 1 —á–∞—Å —Ç–∞–π–º–∞—É—Ç
        
        if result.returncode == 0:
            duration = time.time() - start_time
            print(f"‚úÖ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç {experiment['name']} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.1f}—Å")
            return True, duration
        else:
            print(f"‚ùå –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç {experiment['name']} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:")
            print(result.stderr)
            return False, 0
            
    except subprocess.TimeoutExpired:
        print(f"‚è∞ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç {experiment['name']} –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç")
        return False, 0
    except KeyboardInterrupt:
        print(f"üõë –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç {experiment['name']} –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False, 0

def analyze_results():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
    print("\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤:")
    
    results = []
    
    for experiment in EXPERIMENTS:
        out_dir = f"out-centering-{experiment['name']}"
        
        if os.path.exists(out_dir):
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π checkpoint
            checkpoints = list(Path(out_dir).glob("*.pt"))
            if checkpoints:
                print(f"‚úÖ {experiment['name']}: –ù–∞–π–¥–µ–Ω checkpoint")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ª–æ–≥–∏ –≤ training_plots
                log_files = list(Path("training_plots").glob(f"*{experiment['name']}*.txt"))
                if log_files:
                    # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç
                    latest_log = max(log_files, key=lambda x: x.stat().st_mtime)
                    try:
                        with open(latest_log, 'r') as f:
                            content = f.read()
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π loss
                            for line in content.split('\n'):
                                if '–§–∏–Ω–∞–ª—å–Ω—ã–π training loss:' in line:
                                    final_loss = float(line.split(':')[1].strip())
                                    results.append({
                                        'name': experiment['name'],
                                        'description': experiment['description'],
                                        'final_loss': final_loss
                                    })
                                    break
                    except:
                        pass
            else:
                print(f"‚ùå {experiment['name']}: Checkpoint –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"‚ùå {experiment['name']}: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ loss
    if results:
        results.sort(key=lambda x: x['final_loss'])
        
        print(f"\nüèÜ –†–µ–π—Ç–∏–Ω–≥ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –ø–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É loss:")
        for i, result in enumerate(results, 1):
            print(f"{i}. {result['name']}: {result['final_loss']:.4f} - {result['description']}")
    
    return results

def generate_samples():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–∑—Ü—ã —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞"""
    print("\nüé≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤ —Ç–µ–∫—Å—Ç–∞:")
    
    for experiment in EXPERIMENTS:
        out_dir = f"out-centering-{experiment['name']}"
        
        if os.path.exists(out_dir):
            print(f"\n--- {experiment['name']} ---")
            cmd = [
                'python', 'sample.py',
                f'--out_dir={out_dir}',
                '--num_samples=1',
                '--max_new_tokens=150'
            ]
            
            try:
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)
                if result.returncode == 0:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    output_lines = result.stdout.split('\n')
                    in_sample = False
                    for line in output_lines:
                        if '---------------' in line:
                            in_sample = not in_sample
                            continue
                        if in_sample and line.strip():
                            print(line)
                else:
                    print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {experiment['name']}")
            except:
                print(f"–¢–∞–π–º–∞—É—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {experiment['name']}")

def main():
    print("üß™ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ nanoGPT")
    print("=" * 60)
    
    if len(sys.argv) > 1:
        if sys.argv[1] == 'analyze':
            analyze_results()
            return
        elif sys.argv[1] == 'sample':
            generate_samples()
            return
        elif sys.argv[1] == 'quick':
            max_iters = 500
        else:
            max_iters = int(sys.argv[1])
    else:
        max_iters = 1000
    
    print(f"üéØ –ö–∞–∂–¥—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: {max_iters} –∏—Ç–µ—Ä–∞—Ü–∏–π")
    print(f"üìä –í—Å–µ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: {len(EXPERIMENTS)}")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if not os.path.exists('data/shakespeare_char/train.bin'):
        print("üì• –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ Shakespeare...")
        subprocess.run(['python', 'data/shakespeare_char/prepare.py'])
    
    successful_experiments = 0
    total_time = 0
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã
    for i, experiment in enumerate(EXPERIMENTS, 1):
        print(f"\n{'='*60}")
        print(f"–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç {i}/{len(EXPERIMENTS)}")
        
        success, duration = run_experiment(experiment, max_iters)
        if success:
            successful_experiments += 1
            total_time += duration
    
    print(f"\n{'='*60}")
    print(f"üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: {successful_experiments}/{len(EXPERIMENTS)}")
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}—Å ({total_time/60:.1f} –º–∏–Ω)")
    
    if successful_experiments > 0:
        print(f"\nüìä –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print(f"python {sys.argv[0]} analyze")
        print(f"\nüé≠ –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–∑—Ü–æ–≤ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print(f"python {sys.argv[0]} sample")

if __name__ == "__main__":
    main()
